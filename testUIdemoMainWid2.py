# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'testUIdemoMainWid.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from pyqtgraph.Qt import QtGui, QtCore
from PyQt5.QtCore import QThread, QWaitCondition, QMutex, pyqtSignal
import xlwt
import select
import numpy as np
import pyqtgraph as pg
pg.setConfigOptions(antialias=False)
pg.setConfigOption('background', '#c7c7c7')
pg.setConfigOption('foreground', '#000000')
from pyqtgraph.ptime import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget
from PyQt5.QtWidgets import QMainWindow,QDialog
from PyQt5.QtGui import QColor, QPainter, QFont
import queue
import sys
import re
import socket
import struct
import time as tm
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import QIntValidator,QDoubleValidator
from PyQt5.QtGui import QPixmap
data1 = []
data2 = []
sec = 0
Autotestlist= '调节电压漏电流启动转速带灯控饱和压降/L是否带负载LIN版本及波特率/发电机芯片ID自启动转速FM极性'
singled = '0'
Totaltestnum=0
Numrecord=0
pid=[]
count=0
isFirst=0
rpm=0
load=0
message = queue.Queue(10)
Flag_LinVolt = False
LinID = False
LinVer=0
CurrentLinVolt = 0
recvdone_flag = False
wakup_flag = False
sendmutex = QMutex()
# {{{ TimeCountThread
class recvThread(QThread):
    M_Sig = pyqtSignal(float,float,float,float)
    Autoresultsig=pyqtSignal(str,str,str,str,str,str,int)
    Recv_Sig = pyqtSignal(float,float,float,float)
    Lin_Sig=pyqtSignal(int,int,int)
    def __init__(self,sendsk):
        super(recvThread,self).__init__()
        self.socket=sendsk
        recv=0
    def run(self):
        global recvdone_flag
        while True:
            temp = self.socket.recv(128)
            #res = struct.unpack('>B',temp[0])
            #print(len(temp))
            #print("%x" % temp[1])
            if temp[1] == 0x0:#设置电压
                recvdone_flag = True
                try:
                    res = struct.unpack('>BBBB',temp)
                except:
                    pass
            elif temp[1] == 0x1: #设置打铁
                recvdone_flag = True
            elif temp[1] == 0x2:#设置极对数
                recvdone_flag = True
            elif temp[1] == 0x3:#设置PWM周期
                recvdone_flag = True
            #elif temp[1] == 0x4:
            #elif temp[1] == 0x5:
            #elif temp[1] == 0x6:
            #elif temp[1] == 0x7:
            elif temp[1] == 0x30:
                try:
                    res = struct.unpack('>BBBffffB',temp)
                    #print(res)
                except:
                    recvdone_flag = True
                    pass
                else:
                    self.M_Sig.emit(round(res[3],2),round(res[4],2),round(res[5],2),round(res[6],2))
                    recvdone_flag = True
            elif temp[1] == 0xD:
                try:
                    res = struct.unpack('>BBBBBBBBB',temp)
                except:
                    pass
                else:
                    print('recved lin: %d,%d,%d' % (res[5], res[6], res[7]))
                    self.Lin_Sig.emit(res[5],res[6],res[7])
                    recvdone_flag = True
            elif temp[1] == 0x31:
                try:
                    res = struct.unpack('>BBBfB',temp)				
                except:
                    pass
                else:
                    self.Autoresultsig.emit('调节电压',str(round(res[3],2)),'','','','',res[2])
                    recvdone_flag = True

				
class CountThread(QThread):
    timer = pyqtSignal()   
    #end = pyqtSignal()     
    def run(self):
        print('CountThreadRun!')
        while True:
            self.sleep(1)  
            #if sec == 50:
                #self.end.emit()  
                #break
            self.timer.emit()
            #print('sec')

class ManualCountThread(QThread):
    timer_M = pyqtSignal()   
    #end = pyqtSignal()     
    def run(self):
        print('CountManualThreadRun!')
        while True:
            tm.sleep(1)  
            #if sec == 50:
                #self.end.emit()  
                #break
            self.timer_M.emit()
            #print('sec1')
# }}}

# {{{ TCPClientThread
class ManualindividualThread(QThread):
    Lin_Sig=pyqtSignal(int,int,int)
    Lin_Volt=pyqtSignal(str)
    
    def __init__(self,itmesk,sendVolt,sendSide,sendPole,sendPWM,FM): 
        super(ManualindividualThread,self).__init__()
        self.socket=itmesk
        self.mutex = QMutex()
        self.cond = QWaitCondition()
        self.sendVolt = sendVolt
        self.sendSide = sendSide
        self.sendPole = sendPole
        self.sendPWM = sendPWM
        self.FM = FM
    def Wake_LinVolt(self):
        global CurrentLinVolt,recvdone_flag
        CurrentLinVolt=round((CurrentLinVolt-10.6)/0.1)
        print(CurrentLinVolt)
        if LinVer == 0:
            print('A1')
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 1:#A2
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 2:#A3
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 3:#A4
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 4:#B1
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 5:#B2
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 6:#B3
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 7:#B4
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 8:#C
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 9:#D1
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 10:#D2
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 11:#C
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
        elif LinVer == 12:#F
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x32)+struct.pack('>B',CurrentLinVolt)+struct.pack('>B',0x50)+struct.pack('>B',0x10)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))

        #temp = self.socket.recv(1024)
    def Wake(self):
        self.mutex.lock()
        self.cond.wakeAll()
        self.mutex.unlock()
		
    def run(self):
        global LinID,LinVer,recvdone_flag,wakup_flag
#发送4个设置帧
        self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x00)+struct.pack('>B',self.sendVolt)+struct.pack('>B',0x88)))
        while True:
            if recvdone_flag==True:
                recvdone_flag=False
                break;
            else:
                continue
        self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x01)+struct.pack('>B',self.sendSide)+struct.pack('>B',0x88)))
        while True:
            if recvdone_flag==True:
                recvdone_flag=False
                break;
            else:
                continue
        self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x02)+struct.pack('>B',self.sendPole)+struct.pack('>B',0x88)))
        while True:
            if recvdone_flag==True:
                recvdone_flag=False
                break;
            else:
                continue
        self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x03)+struct.pack('>I',self.sendPWM)+struct.pack('>B',0x88)))
        while True:
            if recvdone_flag==True:
                recvdone_flag=False
                break;
            else:
                continue
        self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x13)+struct.pack('>I',self.FM)+struct.pack('>B',0x88)))
        while True:
            if recvdone_flag==True:
                recvdone_flag=False
                break;
            else:
                continue
        while True:
            self.mutex.lock()
            wakup_flag = True
            self.cond.wait(self.mutex)
            print("wakeup")
            if not message.empty():
                msg=message.get(block=True,timeout=0)
                print(msg)
                sendmutex.lock()
                if msg == 'pon':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x31)+struct.pack('>B',0x1)+struct.pack('>B',0x88)))
                elif msg == 'pof':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x31)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
                elif msg == 'lon':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x20)+struct.pack('>B',0x1)+struct.pack('>B',0x88)))

                elif msg == 'lof':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x20)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))

                elif msg == 'ion':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x21)+struct.pack('>B',0x1)+struct.pack('>B',0x88)))

                elif msg == 'iof':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x21)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
                elif msg == 'son':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x22)+struct.pack('>B',0x1)+struct.pack('>B',0x88)))

                elif msg == 'sof':
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x22)+struct.pack('>B',0x0)+struct.pack('>B',0x88)))

                elif msg == 'lini':
                    print('send lin')
                    self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0xD)+struct.pack('>B',0x1)+struct.pack('>B',0x88)))
                    while True:
                        if recvdone_flag==True:
                            recvdone_flag=False
                            break;
                        else:
                            continue
                sendmutex.unlock()
            self.mutex.unlock()

class ManualHeartBeatThread(QThread):
    #M_Sig = pyqtSignal(float,float,float,float)
    def __init__(self,sendVolt,sendSide,sendPole,sendPWM,sendFM,sendsk): #frametype:0设置帧 1:测试帧
        super(ManualHeartBeatThread,self).__init__()
        self.sendVolt=sendVolt
        self.sendSide=sendSide
        self.sendPole=sendPole
        self.sendPWM=sendPWM
        self.FM=sendFM
        self.socket=sendsk
        recv=0
        global rpm,load
    def run(self):
        while True:
            tm.sleep(0.1) 
            #print(load)
            sendmutex.lock()
            self.socket.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x30)+struct.pack('>H',rpm)+struct.pack('>f',load)+struct.pack('>B',0x88)))
            sendmutex.unlock()
            #try:
                #temp = self.socket.recv(128)
                #res = struct.unpack('>BBBffffB',temp)
            #except:
                #print(temp)
            #self.M_Sig.emit(round(res[3],2),round(res[4],2),round(res[5],2),round(res[6],2))


class AutoHeartBeatThread(QThread):
    A_Sig = pyqtSignal(str)

    def __init__(self,sendsk): #frametype:0设置帧 1:测试帧
        super(AutoHeartBeatThread,self).__init__()
        recv=0
        self.socketAuto = sendsk
        global rpm,load
    def run(self):
        while True:
            tm.sleep(5) 
            self.socketAuto.send(bytes(struct.pack('>B',0x99)))
            temp = self.socketAuto.recv(128)
            res = struct.unpack('<B',temp)
            self.A_Sig.emit('heatbeat')





class TCPThread(QThread):
    Error = pyqtSignal()   # TCP发送完成，向主线程发送信号
    Autoresultsig=pyqtSignal(str,str,str,str,str,str,int)
    Mresultsig=pyqtSignal(str,str,str,str,str,str)

    def __init__(self,test,sendVolt,sendSide,sendPole,sendPWM,sendNum,sendlist,sendPid,sendFM): #frametype:0设置帧 1:测试帧
        super(TCPThread,self).__init__()
        self.test=test
        self.sendVolt=sendVolt
        self.sendSide=sendSide
        self.sendPole=sendPole
        self.sendPWM=sendPWM
        self.recvlen=sendNum
        self.recvlist=sendlist
        self.PID=sendPid
        self.FM=sendFM
        recv=0
    def TCP_Close(self):
        self.sk.close()
        print('close1!')
    def run(self):
        global isFirst
        if self.test=='Auto':
            print('AutoTcpThreadStart')
            self.sk = socket.socket()
            self.sk.settimeout(10)
            try:
                #self.sk.connect(('169.254.124.29', 8088))
                self.sk.connect(('192.168.1.29', 8088))
            except:
                print('ConnectionFailed!')

                self.Error.emit()
                return
            else:
                print('成功了')
                self.sk.settimeout(10)
        #发送4个设置帧
                self.sk.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x00)+struct.pack('>B',self.sendVolt)+struct.pack('>B',0x88)))
                try:
                    temp = self.sk.recv(16)
                except:
                    pass
                self.sk.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x01)+struct.pack('>B',self.sendSide)+struct.pack('>B',0x88)))
                try:
                    temp = self.sk.recv(16)
                except:
                    pass
                self.sk.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x02)+struct.pack('>B',self.sendPole)+struct.pack('>B',0x88)))
                try:
                    temp = self.sk.recv(16)
                except:
                    pass
                self.sk.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x03)+struct.pack('>I',self.sendPWM)+struct.pack('>B',0x88)))
                try:
                    temp = self.sk.recv(16)
                except:
                    pass
                self.sk.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',0x13)+struct.pack('>I',self.FM)+struct.pack('>B',0x88)))
                try:
                    temp = self.sk.recv(16)
                except:
                    pass
            #发送测试项
                for i in range(0,len(self.PID)):
                    print('aaaaaa')
                    if self.PID[i] == 13:
                        res=0
                        self.sk.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',self.PID[i])+struct.pack('>B',0x0)+struct.pack('>B',0x88)))
                        temp = self.sk.recv(128)
                        print('linsend')
                        try:
                            res = struct.unpack('>BBBBBBBBB',temp)
                        except:
                            pass
                        if res[3] == 1:
                            baud='19200'
                        elif res[3]== 0:
                            baud='9600'
                        elif res[3]== 2:
                            baud='自适应'
                        if res[4]==1:
                            Linver='2.x'
                        elif res[4]==0:
                            Linver='1.x'
                        if res[5] == 1:
                            framever='A2'
                        elif res[5]== 0:
                            framever='A1'
                        elif res[5] == 2:
                            framever='A3'
                        elif res[5]== 3:
                            framever='A4'
                        elif res[5] == 4:
                            framever='B1'
                        elif res[5]== 5:
                            framever='B2'
                        elif res[5]== 6:
                            framever='B3'
                        elif res[5] == 7:
                            framever='B4'
                        elif res[5]== 8:
                            framever='C'
                        elif res[5] == 9:
                            framever='D1'
                        elif res[5]== 10:
                            framever='D2'
                        elif res[5] == 11:
                            framever='E'
                        elif res[5]== 12:
                            framever='F'
                        self.Autoresultsig.emit('LIN版本',baud,Linver,framever,str(res[6]),str(res[7]),res[2])
                    else:
                        self.sk.send(bytes(struct.pack('>B',0x55)+struct.pack('>B',self.PID[i])+struct.pack('>B',0x88)))
                        temp=''
                        try:
                            temp = self.sk.recv(128)
                        except:
                            pass
                        if self.PID[i]==8:
                            #print(temp)
                            try:
                                res = struct.unpack('>BBBfB',temp)
                            except:
                                pass
                            else:
                                self.Autoresultsig.emit('调节电压',str(round(res[3],2)),'','','','',res[2])
                        elif self.PID[i]==9:
                            try:
                                res = struct.unpack('>BBBfB',temp)
                            except:
                                pass
                            else:
                                self.Autoresultsig.emit('漏电流',str(round(res[3],3)),'','','','',res[2])
                        elif self.PID[i]==10:
                            try:
                                res = struct.unpack('>BBBHB',temp)
                            except:
                                pass
                            else:
                                self.Autoresultsig.emit('启动转速',str(round(res[3],2)),'','','','',res[2])
                        elif self.PID[i]==11:
                            try:
                                res = struct.unpack('>BBBfBB',temp)
                            except:
                                pass
                            else:
                                self.Autoresultsig.emit('饱和压降',str(round(res[3],2)),str(res[4]),'','','',res[2])
                        elif self.PID[i]==12:
                            try:
                                res = struct.unpack('>BBBfB',temp)
                            except:
                                pass
                            else:
                                self.Autoresultsig.emit('最大负载能力',str(round(res[3],2)),'','','','',res[2])

                        elif self.PID[i]==14:
                            try:
                                res = struct.unpack('>BBBHB',temp)
                            except:
                                pass
                            else:
                                self.Autoresultsig.emit('自启动转速',str(res[3]),'','','','',res[2])
                        elif self.PID[i]==15:
                            try:
                                res = struct.unpack('>BBBBB',temp)
                            except:
                                pass
                            if res[3] == 0:
                                self.Autoresultsig.emit('FM极性','正向','','','','',res[2])
                            elif res[3] == 1:
                                self.Autoresultsig.emit('FM极性','反向','','','','',res[2])

# }}}


# {{{ DrawCircle

class PercentProgressBar(QWidget):

    MinValue = 0
    MaxValue = 100
    Value = 0
    BorderWidth = 8
    Clockwise = True  # 顺时针还是逆时针
    ShowPercent = True  # 是否显示百分比
    ShowFreeArea = False  # 显示背后剩余
    ShowSmallCircle = False  # 显示带头的小圆圈

    def __init__(self, *args, value=0, minValue=0, maxValue=100,
                 borderWidth=8, clockwise=True, showPercent=True,
                 showFreeArea=False, showSmallCircle=False,
                 textColor=QColor(190, 234, 205),
                 borderColor=QColor(199, 232, 91),
                 backgroundColor=QColor(0, 0, 0, 0), **kwargs):
        super(PercentProgressBar, self).__init__(*args, **kwargs)
        self.Value = value
        self.MinValue = minValue
        self.MaxValue = maxValue
        self.BorderWidth = borderWidth
        self.Clockwise = clockwise
        self.ShowPercent = showPercent
        self.ShowFreeArea = showFreeArea
        self.ShowSmallCircle = showSmallCircle
        self.TextColor = textColor
        self.BorderColor = borderColor
        self.BackgroundColor = backgroundColor
    def paintEvent(self, event):
        super(PercentProgressBar, self).paintEvent(event)
        width = self.width()
        height = self.height()
        side = min(width, height)
        painter = QPainter(self)
        # 反锯齿
        painter.setRenderHints(QPainter.Antialiasing |
                               QPainter.TextAntialiasing)
        # 坐标中心为中间点
        painter.translate(width / 2, height / 2)
        # 按照100x100缩放
        painter.scale(side / 100.0, side / 100.0)

        # 绘制圆弧
        self._drawArc(painter, 50 - self.BorderWidth / 2)
        # 绘制文字
        self._drawText(painter, 50)

    def _drawArc(self, painter: QPainter, radius: int):
        # 绘制圆弧
        painter.save()
        painter.setBrush(Qt.NoBrush)
        # 修改画笔
        pen = painter.pen()
        pen.setWidthF(self.BorderWidth)
        pen.setCapStyle(Qt.SquareCap)

        arcLength = 360.0 / (self.MaxValue - self.MinValue) * self.Value
        rect = QRectF(-radius, -radius, radius * 2, radius * 2)

        # 绘制当前进度圆弧
        pen.setColor(self.BorderColor)
        painter.setPen(pen)
        painter.drawArc(rect, 0, -arcLength * 16)

        painter.restore()

    def _drawText(self, painter: QPainter, radius: int):
        # 绘制文字
        painter.save()
        painter.setPen(self.TextColor)
        painter.setFont(QFont('MSYH', 20))
        strValue = '{}%'.format(int(self.Value / (self.MaxValue - self.MinValue)
                                    * 100)) if self.ShowPercent else str(self.Value)
        painter.drawText(QRectF(-radius, -radius, radius * 2,
                                radius * 2), Qt.AlignCenter, strValue)
        painter.restore()

    @pyqtProperty(int)
    def minValue(self) -> int:
        return self.MinValue

    @minValue.setter
    def minValue(self, minValue: int):
        if self.MinValue != minValue:
            self.MinValue = minValue
            self.update()

    @pyqtProperty(int)
    def maxValue(self) -> int:
        return self.MaxValue

    @maxValue.setter
    def maxValue(self, maxValue: int):
        if self.MaxValue != maxValue:
            self.MaxValue = maxValue
            self.update()

    @pyqtProperty(int)
    def value(self) -> int:
        return self.Value

    @value.setter
    def value(self, value: int):
        if self.Value != value:
            self.Value = value
            self.update()

    @pyqtProperty(float)
    def borderWidth(self) -> float:
        return self.BorderWidth

    @borderWidth.setter
    def borderWidth(self, borderWidth: float):
        if self.BorderWidth != borderWidth:
            self.BorderWidth = borderWidth
            self.update()

    @pyqtProperty(bool)
    def clockwise(self) -> bool:
        return self.Clockwise

    @pyqtProperty(bool)
    def showPercent(self) -> bool:
        return self.ShowPercent

    @showPercent.setter
    def showPercent(self, showPercent: bool):
        if self.ShowPercent != showPercent:
            self.ShowPercent = showPercent
            self.update()

    @pyqtProperty(QColor)
    def textColor(self) -> QColor:
        return self.TextColor

    @textColor.setter
    def textColor(self, textColor: QColor):
        if self.TextColor != textColor:
            self.TextColor = textColor
            self.update()

    @pyqtProperty(QColor)
    def borderColor(self) -> QColor:
        return self.BorderColor

    @borderColor.setter
    def borderColor(self, borderColor: QColor):
        if self.BorderColor != borderColor:
            self.BorderColor = borderColor
            self.update()
    def setValue(self, value):
        self.value = value

    def sizeHint(self) -> QSize:
        return QSize(100, 100)

# }}}

# {{{ TestItemChoose

class Ui_ChooseDialog(QDialog):

    TestItemSignal = pyqtSignal(str)

    def __init__(self):
        super(Ui_ChooseDialog, self).__init__()
        self.setupUi(self)
    def setupUi(self, Dialog):
        global singled,Autotestlist
        
        Dialog.setObjectName("Dialog")
        Dialog.resize(950, 800)
        #Dialog.setStyleSheet("#Dialog {background-color:rgba(0,0,0,0);")
        
        self.horizontalLayout = QtWidgets.QHBoxLayout(Dialog)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setMinimumSize(QtCore.QSize(400, 0))
        self.widget.setStyleSheet("#widget{background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #FFFFFF, stop:0.05 #E5EEF7);}")
        self.widget.setObjectName("widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 0))

        self.pushButton.setStyleSheet("#pushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #56D473,stop:1 #5DCA79);\n"
"border-radius:10px;border:0px;color:white;font-size:30px;font-family:宋体;\n}")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_4.addWidget(self.pushButton)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setStyleSheet("#pushButton_2{\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #E37171,stop:1 #DD6767);border-radius:10px;border:0px;color:rgb(218,225,238);font-size:30px;font-family:宋体;}\n"
)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_4.addWidget(self.pushButton_2)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        self.gridLayout_2.addLayout(self.horizontalLayout_4, 4, 1, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(15, 80, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem3, 1, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem4, 5, 1, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(15, 80, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem5, 1, 2, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem6, 0, 1, 1, 1)
        self.groupBox_2 = QtWidgets.QGroupBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setAutoFillBackground(False)
        self.groupBox_2.setStyleSheet("#groupBox_2 {border:2px groove rgb(72, 224, 208);background-color:rgba(0,0,0,0);}")
        self.groupBox_2.setFlat(False)
        self.groupBox_2.setCheckable(False)
        self.groupBox_2.setChecked(False)
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.checkBox_6 = QtWidgets.QCheckBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_6.sizePolicy().hasHeightForWidth())
        self.checkBox_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.checkBox_6.setFont(font)
        self.checkBox_6.setStyleSheet("#checkBox_6 {font-size:20px;color:black;padding-left:25px;}\n"
"#checkBox_6:hover { font-size:20px;"
"border-radius:1px;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#checkBox_6:pressed { font-size:15px;background-color:cyan;}\n"
"#checkBox_6:indicator {width: 25px;height: 25px;}"

)
        ret = re.search("LIN版本",Autotestlist)
        if ret!= None:
            self.checkBox_6.setChecked(True)
        else:
            self.checkBox_6.setChecked(False)
        self.checkBox_6.setObjectName("checkBox_6")
        self.gridLayout.addWidget(self.checkBox_6, 0, 1, 1, 1)
        
        
        self.checkBox_4 = QtWidgets.QCheckBox(self.groupBox_2)
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_4.sizePolicy().hasHeightForWidth())
        self.checkBox_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.checkBox_4.setFont(font)
        self.checkBox_4.setStyleSheet("#checkBox_4 {font-size:20px;color:black;padding-left:25px;}\n"
"#checkBox_4:hover { font-size:20px;"
"border-radius:1px;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#checkBox_4:pressed { font-size:15px;background-color:cyan;}\n"
"#checkBox_4:indicator {width: 25px;height: 25px;}"

)
        ret = re.search("饱和压降",Autotestlist)
        if ret!= None:
            self.checkBox_4.setChecked(True)
        else:
            self.checkBox_4.setChecked(False)
        self.checkBox_4.setObjectName("checkBox_4")
        self.gridLayout.addWidget(self.checkBox_4, 3, 0, 1, 1)

        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_2.sizePolicy().hasHeightForWidth())
        self.checkBox_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setStyleSheet("#checkBox_2 {font-size:20px;color:black;padding-left:25px;}\n"
"#checkBox_2:hover { font-size:20px;"
"border-radius:1px;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#checkBox_2:pressed { font-size:15px;background-color:cyan;}\n"
"#checkBox_2:indicator {width: 25px;height: 25px;}"

)
        ret = re.search("漏电流",Autotestlist)
        if ret!= None:
            self.checkBox_2.setChecked(True)
        else:
            self.checkBox_2.setChecked(False)
        self.checkBox_2.setTristate(False)
        self.checkBox_2.setObjectName("checkBox_2")
        self.gridLayout.addWidget(self.checkBox_2, 1, 0, 1, 1)
        self.pushButtonx = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButtonx.sizePolicy().hasHeightForWidth())
        self.pushButtonx.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.pushButtonx.setFont(font)
        self.pushButtonx.setStyleSheet("#pushButtonx {color:black;border-radius:150px;padding-left:25px;} \n"
"#pushButtonx:hover { font-size:20px;background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #5BCC78,stop:1 #2D79D7);\n"
"border-radius:20px;border-width:3;border-color:#5BCC78;border-style:solid;}\n"
"#pushButtonx:pressed {font-size:15px;background-color:cyan;} \n")
        self.pushButtonx.setChecked(True)
        self.pushButtonx.setObjectName("pushButtonx")
        self.gridLayout.addWidget(self.pushButtonx, 4, 0, 1, 1)
        self.pushButtonx.setFlat(True)
        self.pushButtonx.setDisabled(True)
        self.pushButtony = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButtony.sizePolicy().hasHeightForWidth())
        self.pushButtony.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.pushButtony.setFont(font)
        self.pushButtony.setStyleSheet("#pushButtony {color:black;border-radius:150px;padding-left:25px;} \n"
"#pushButtony:hover { font-size:20px;background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #5BCC78,stop:1 #2D79D7);\n"
"border-radius:20px;border-width:3;border-color:#5BCC78;border-style:solid;}\n"
"#pushButtony:pressed {font-size:15px;background-color:cyan;} \n")
        self.pushButtony.setChecked(True)
        self.pushButtony.setObjectName("pushButtony")
        self.gridLayout.addWidget(self.pushButtony, 3, 1, 1, 1)
        self.pushButtony.setFlat(True)
        self.pushButtony.setDisabled(True)
        self.checkBox_8 = QtWidgets.QCheckBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_8.sizePolicy().hasHeightForWidth())
        self.checkBox_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.checkBox_8.setFont(font)
        self.checkBox_8.setStyleSheet("#checkBox_8 {font-size:20px;color:black;padding-left:25px;}\n"
"#checkBox_8:hover { font-size:20px;"
"border-radius:1px;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#checkBox_8:pressed { font-size:15px;background-color:cyan;}\n"
"#checkBox_8:indicator {width: 25px;height: 25px;}"
)
#"#checkBox_8:indicator:checked {border-width:1px;border-color:#E37171;border-style:solid;background:#E37171;}"
        ret = re.search("自启动转速",Autotestlist)
        if ret!= None:
            self.checkBox_8.setChecked(True)
        else:
            self.checkBox_8.setChecked(False)
        #if singled == '1':
            #self.checkBox_8.setDisabled(True)
        #else:
            #self.checkBox_8.setEnabled(True)
        self.checkBox_8.setObjectName("checkBox_8")
        self.gridLayout.addWidget(self.checkBox_8, 1, 1, 1, 1)
        self.pushButtony = QtWidgets.QPushButton(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButtony.sizePolicy().hasHeightForWidth())
        self.pushButtony.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.pushButtony.setFont(font)
        self.pushButtony.setStyleSheet("#pushButtony {color:black;border-radius:150px;padding-left:25px;} \n"
"#pushButtony:hover {font-size:20px;background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #5BCC78,stop:1 #2D79D7); \n"
"border-radius:20px;border-width:3;border-color:#5BCC78;border-style:solid;}\n"
"#pushButtony:pressed {font-size:15px;background-color:cyan;} \n")
        self.pushButtony.setChecked(True)
        self.pushButtony.setObjectName("pushButtony")
        self.gridLayout.addWidget(self.pushButtony, 4, 1, 1, 1)
        self.pushButtony.setFlat(True)
        self.pushButtony.setDisabled(True)
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())
        self.checkBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.checkBox.setFont(font)
        self.checkBox.setFocusPolicy(QtCore.Qt.NoFocus)
        self.checkBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.checkBox.setAutoFillBackground(False)
        self.checkBox.setStyleSheet("#checkBox {font-size:20px;color:black;padding-left:25px;}\n"
"#checkBox:hover { font-size:20px;"
"border-radius:1px;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#checkBox:pressed { font-size:15px;background-color:cyan;}\n"
"#checkBox:indicator {width: 25px;height: 25px;}"
)

        self.checkBox.setIconSize(QtCore.QSize(0, 0))
        ret = re.search("调节电压",Autotestlist)
        if ret!= None:
            self.checkBox.setChecked(True)
        else:
            self.checkBox.setChecked(False)
        self.checkBox.setObjectName("checkBox")
        self.gridLayout.addWidget(self.checkBox, 0, 0, 1, 1)
        self.checkBox_3 = QtWidgets.QCheckBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_3.sizePolicy().hasHeightForWidth())
        self.checkBox_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setStyleSheet("#checkBox_3 {font-size:20px;color:black;padding-left:25px;}\n"
"#checkBox_3:hover { font-size:20px;"
"border-radius:1px;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#checkBox_3:pressed { font-size:15px;background-color:cyan;}\n"
"#checkBox_3:indicator {width: 25px;height: 25px;}"
)
        ret = re.search("启动转速带灯控",Autotestlist)
        if ret!= None:
            self.checkBox_3.setChecked(True)
        else:
            self.checkBox_3.setChecked(False)
        self.checkBox_3.setObjectName("checkBox_3")
        self.gridLayout.addWidget(self.checkBox_3, 2, 0, 1, 1)
        #if singled == '0':
            #self.checkBox_3.setDisabled(True)
        #else:
            #self.checkBox_3.setEnabled(True)
        self.checkBox_10 = QtWidgets.QCheckBox(self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_10.sizePolicy().hasHeightForWidth())
        self.checkBox_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.checkBox_10.setFont(font)
        
        self.checkBox_10.setStyleSheet("#checkBox_10 {font-size:20px;color:black;padding-left:25px;}\n"
"#checkBox_10:hover { font-size:20px;"
"border-radius:1px;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#checkBox_10:pressed { font-size:15px;background-color:cyan;}\n"
"#checkBox_10:indicator {width: 25px;height: 25px;}"
)
        ret = re.search("FM极性",Autotestlist)
        if ret!= None:
            self.checkBox_10.setChecked(True)
        else:
            self.checkBox_10.setChecked(False)
        self.checkBox_10.setObjectName("checkBox_10")
        self.gridLayout.addWidget(self.checkBox_10, 2, 1, 1, 1)
        self.horizontalLayout_3.addLayout(self.gridLayout)
        self.gridLayout_2.addWidget(self.groupBox_2, 1, 1, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem7, 3, 1, 1, 1)
        self.widget_2 = QtWidgets.QWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 6, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.undone = QtWidgets.QPushButton(self.widget_2)
        self.undone.setEnabled(False)
        self.undone.setText("")
        self.undone.setFlat(True)
        self.undone.setObjectName("undone")
        self.horizontalLayout_2.addWidget(self.undone)
        spacerItem8 = QtWidgets.QSpacerItem(543, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        self.gridLayout_2.addWidget(self.widget_2, 2, 1, 1, 1)
        self.gridLayout_2.setRowStretch(0, 1)
        self.gridLayout_2.setRowStretch(1, 9)
        self.gridLayout_2.setRowStretch(2, 1)
        self.gridLayout_2.setRowStretch(3, 1)
        self.gridLayout_2.setRowStretch(4, 1)
        self.horizontalLayout.addWidget(self.widget)
        self.pushButton.clicked.connect(self.Sendtestitem)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        
        

    def Sendtestitem(self):
        item = ''
        global Numrecord
        Numrecord=0
        if self.checkBox.isChecked():
            item = item + self.checkBox.text()
            Numrecord+=1
        if self.checkBox_2.isChecked():
            item = item + self.checkBox_2.text()
            Numrecord+=1
        if self.checkBox_3.isChecked():
            item = item + self.checkBox_3.text()
            Numrecord+=1
        if self.checkBox_4.isChecked():
            item = item + self.checkBox_4.text()
            Numrecord+=2
        if self.checkBox_6.isChecked():
            item = item + self.checkBox_6.text()
            Numrecord+=5
        if self.checkBox_8.isChecked():
            item = item + self.checkBox_8.text()
            Numrecord+=1
        if self.checkBox_10.isChecked():
            item = item + self.checkBox_10.text()
            Numrecord+=1
        self.TestItemSignal.emit(item)
        self.close()
            

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "选择测试项"))
        self.pushButton.setText(_translate("Dialog", "确定"))
        self.pushButton_2.setText(_translate("Dialog", "取消"))
        self.groupBox_2.setTitle(_translate("Dialog", "选择测试项："))
        self.checkBox_6.setText(_translate("Dialog", "LIN版本及波特率/发电机芯片ID"))
        self.checkBox_4.setText(_translate("Dialog", "饱和压降/L是否带负载      "))
        self.checkBox_2.setText(_translate("Dialog", "漏电流                    "))
        #self.pushButtonx.setText(_translate("Dialog", "预留1"))
        #self.pushButtony.setText(_translate("Dialog", "预留3"))
        self.checkBox_8.setText(_translate("Dialog", "自启动转速                 "))
        #self.checkBox_9.setText(_translate("Dialog", "预留2"))
        self.checkBox.setText(_translate("Dialog", "调节电压                     "))
        self.checkBox_3.setText(_translate("Dialog", "启动转速带灯控             "))
        self.checkBox_10.setText(_translate("Dialog", "FM极性                    "))

# }}}        

# {{{ AutotestResult

class Ui_AutoTest(QDialog):
    def __init__(self,Volt_MainWid,Side_MainWid,Pp_MainWid,Pwm_MainWid,Num_MainWid,List_MainWid,Pid_MainWid,FM_MainWid):
        super(Ui_AutoTest, self).__init__()
        self.Volt_AutoWid=Volt_MainWid
        self.Side_AutoWid=Side_MainWid
        self.Pp_AutoWid=Pp_MainWid
        self.Pwm_AutoWid=Pwm_MainWid
        self.Num_AutoWid=Num_MainWid
        #print(self.Num_AutoWid)
        self.List_AutoWid=List_MainWid
        self.Pid_AutoWid=Pid_MainWid
        self.FM_AutoWid=FM_MainWid
        self.erroNum=0
        self.currentNum=0
        self.setupUi(self)
        self.isFirst=1
        self.netThread = TCPThread('Auto',self.Volt_AutoWid,self.Side_AutoWid,self.Pp_AutoWid,self.Pwm_AutoWid,self.Num_AutoWid,self.List_AutoWid,self.Pid_AutoWid,self.FM_AutoWid)
        #self.timeThread.end.connect(self.end)
        
        self.netThread.Autoresultsig.connect(self.Update_result)
        def ccc():
            reply = QMessageBox.warning(self,
                                        "警告",  
                                        "网络失去响应",  
                                        QMessageBox.Yes)
            print('hhhhh')
            self.close()
            self.netThread.terminate()
        self.netThread.Error.connect(ccc)
        self.netThread.start()
    def TimeOut(self):
        print('Timeout!')
    def Update_result(self,objname,res,res1,res2,res3,res4,Flag_erro):
        global Totaltestnum
        ifFirst=1
        #print(objname)
        #print(res)
        flag=''
        
        
        _translate = QtCore.QCoreApplication.translate
        #print(Flag_erro)
        if objname == '调节电压'or objname == '漏电流'or objname == '启动转速'or objname == 'FM极性'or objname == '自启动转速':
            print('进了')
            if Flag_erro == 0:
                flag='正常'
            else:
                flag='异常'
                self.erroNum+=1
        elif objname == '饱和压降':
            if  Flag_erro==0:
                flag='正常'
            else:
                flag='异常'
                self.erroNum+=1
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", '饱和压降'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res+'/V'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag))
            self.Num_AutoWid-=1
            self.currentNum+=1
            self.updateValue()
            if res1 == '1':
                res1='是'
            elif res1=='0':
                res1='否'
            else:
                self.erroNum+=1
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", 'L是否带负载'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res1))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag))
            self.Num_AutoWid-=1
            self.currentNum+=1
            self.updateValue()
            return
        elif objname == 'LIN版本':
            if Flag_erro == 0:
                flag='正常'
                flag1='正常'
                flag2='正常'
                flag3='正常'
                flag4='正常'
            else:
                flag='异常'
                flag1='异常'
                flag2='异常'
                flag3='异常'
                flag4='异常'
                self.erroNum+=5
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", '波特率'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res+'/Bps'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag))
            self.Num_AutoWid-=1
            self.currentNum+=1
            self.updateValue()
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", 'LIN版本'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res1))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag1))
            self.Num_AutoWid-=1
            self.currentNum+=1
            self.updateValue()
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", '帧版本'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res2))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag2))
            self.Num_AutoWid-=1
            self.currentNum+=1
            self.updateValue()
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", '发电机ID'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res3))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag3))
            self.Num_AutoWid-=1
            self.currentNum+=1
            self.updateValue()

            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", '芯片ID'))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res4))
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag4))
            self.Num_AutoWid-=1
            self.currentNum+=1
            self.updateValue()
            return
            #print(Totaltestnum)
            #print('项')
        print(objname+':'+res+flag+str(Flag_erro))
        self.tableWidget.item(Totaltestnum-self.Num_AutoWid,0).setText(_translate("Dialog", objname))
        if objname == '调节电压':
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res+'/V'))
        elif objname == '漏电流':
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res+'/A'))
        elif objname == '启动转速':
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res+'/Rpm'))
        elif objname == '自启动转速':
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res+'/Rpm'))
        else:
            self.tableWidget.item(Totaltestnum-self.Num_AutoWid,2).setText(_translate("Dialog", res))
        self.tableWidget.item(Totaltestnum-self.Num_AutoWid,1).setText(_translate("Dialog", flag))
        self.label_11.setText(_translate("Dialog", str(self.erroNum)))
        self.currentNum+=1
        self.updateValue()
        #print('刚刚显示的是第'+str(Totaltestnum-Autotestnum))
        self.Num_AutoWid-=1
        #print('还剩:')
        #print(self.Num_AutoWid)
        #print('共')
        #print(Totaltestnum)
        #self.netThread.Autoresultsig.connect(self.Update_result)
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1122, 749)
        Dialog.setStyleSheet("#Dialog {background-color: rgb(64, 67, 74);}")
        self.gridLayout = QtWidgets.QGridLayout(Dialog)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem, 0, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 0, 1, 1)
        self.widget = QtWidgets.QWidget(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setMinimumSize(QtCore.QSize(400, 250))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_2 = QtWidgets.QFrame(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setStyleSheet("#frame_2{background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #056189, stop:1 #101A32);border-radius:10px}\n")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem2 = QtWidgets.QSpacerItem(64, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.label = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.label.setFont(font)
        self.label.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label.setTabletTracking(False)
        self.label.setStyleSheet("#label {color:#FFFFFF;}\n")
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("#label_2 {color:#C7E85B;}\n")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("#label_3 {color:#FFFFFF;}\n")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        spacerItem3 = QtWidgets.QSpacerItem(64, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.label_4 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("#label_4 {color:#FFFFFF;}\n")
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_3.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("#label_5 {color:#C7E85B;}\n")
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5)
        spacerItem4 = QtWidgets.QSpacerItem(64, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.label_8 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("#label_8 {color:#FFFFFF;}\n")
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_3.addWidget(self.label_8)
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("#label_9 {color:#C7E85B;}\n")
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_3.addWidget(self.label_9)
        spacerItem5 = QtWidgets.QSpacerItem(64, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("#label_6 {color:#FFFFFF;}\n")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_3.addWidget(self.label_6)
        self.label_7 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("#label_7 {color:#C7E85B;}\n")
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_3.addWidget(self.label_7)
        spacerItem6 = QtWidgets.QSpacerItem(64, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.verticalLayout.addWidget(self.frame_2)
        spacerItem7 = QtWidgets.QSpacerItem(250, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem7)
        self.frame_5 = QtWidgets.QFrame(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.frame_5.sizePolicy().hasHeightForWidth())
        self.frame_5.setSizePolicy(sizePolicy)
        self.frame_5.setAutoFillBackground(False)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.frame_5)
        self.frame.setStyleSheet("#frame{background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #056189, stop:1 #101A32);\n"
"border-radius:10px}\n")
        self._value = 0
        self._widgets = []
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        self.label_13 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)

        
        #self.label_13.setGeometry(QtCore.QRect(10, 30, 111, 131))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("#label_13 {color:#FFFFFF;}\n")

        
        self.label_13.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_13.setObjectName("label_13")
        
        self._widgets.append(PercentProgressBar(self))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(3)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self._widgets[0].sizePolicy().hasHeightForWidth())
        self._widgets[0].setSizePolicy(sizePolicy)

        
        self.horizontalLayout_4.addWidget(self.label_13)
        self.horizontalLayout_4.addWidget(self._widgets[0])


        
        
        #self._timer = QTimer(self, timeout=self.updateValue)
        
        #self._timer.start(100)


        self.label_14 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(9)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("#label_14 {color:#FFFFFF;}\n")
        self.label_14.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_4.addWidget(self.label_14)

        self.horizontalLayout.addWidget(self.frame)
        
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem8)
        self.frame_3 = QtWidgets.QFrame(self.frame_5)
        self.frame_3.setStyleSheet("#frame_3{background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #056189, stop:1 #101A32);\n"
"border-radius:10px}\n")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem9 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem9)
        self.label_10 = QtWidgets.QLabel(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(8)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("#label_10 {color:#FFFFFF;}\n")
        self.label_10.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_2.addWidget(self.label_10)
        self.label_11 = QtWidgets.QLabel(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_11.setFont(font)
        self.label_11.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_11.setStyleSheet("#label_11 {color:#C7E85B;}\n")
        self.label_11.setLocale(QtCore.QLocale(QtCore.QLocale.Chinese, QtCore.QLocale.China))
        self.label_11.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_11.setTextFormat(QtCore.Qt.PlainText)
        self.label_11.setScaledContents(False)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_2.addWidget(self.label_11)
        self.label_12 = QtWidgets.QLabel(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(6)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("#label_12 {color:#FFFFFF;}\n")
        self.label_12.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_2.addWidget(self.label_12)
        spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem10)
        self.horizontalLayout.addWidget(self.frame_3)
        self.verticalLayout.addWidget(self.frame_5)
        spacerItem11 = QtWidgets.QSpacerItem(250, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem11)
        self.frame_4 = QtWidgets.QFrame(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.frame_4.sizePolicy().hasHeightForWidth())
        self.frame_4.setSizePolicy(sizePolicy)
        self.frame_4.setStyleSheet("#frame_4{background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #056189, stop:1 #101A32);\n"
"border-radius:10px}\n")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        


        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem12 = QtWidgets.QSpacerItem(25, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem12, 0, 1, 1, 1)
        spacerItem13 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem13, 1, 0, 1, 1)


# {{{ TableWidget

        self.tableWidget = QtWidgets.QTableWidget(self.frame_4)
        font = QtGui.QFont()
        font.setStrikeOut(False)
        self.tableWidget.setFont(font)

        self.tableWidget.setAutoFillBackground(False)
        self.tableWidget.setStyleSheet("#tableWidget{border:2px inset rgb(216, 226, 232);}\n")
        self.tableWidget.setFrameShape(QtWidgets.QFrame.Box)
        self.tableWidget.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.tableWidget.setLineWidth(0)
        self.tableWidget.setMidLineWidth(0)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked)
        self.tableWidget.setTabKeyNavigation(False)
        self.tableWidget.setProperty("showDropIndicator", False)
        self.tableWidget.setDragDropOverwriteMode(False)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        self.tableWidget.setWordWrap(True)
        self.tableWidget.setCornerButtonEnabled(False)
        self.tableWidget.setRowCount(15)
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setEditTriggers(QTableWidget.NoEditTriggers)
        item = QtWidgets.QTableWidgetItem()
        item.setText("1")
        item.setBackground(QtGui.QColor(92, 191, 155))
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(92, 191, 155))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setForeground(brush)
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(92, 191, 155))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setForeground(brush)
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        item.setBackground(QtGui.QColor(85, 191, 155))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setForeground(brush)
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(92, 197, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        self.tableWidget.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(5, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setForeground(brush)
        self.tableWidget.setItem(5, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(5, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(6, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(6, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(6, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(7, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(7, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 79))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(7, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(8, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(8, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(8, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(9, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(9, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(9, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(10, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(10, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(10, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(11, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(11, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(11, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(12, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(12, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(92, 191, 155))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(12, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(13, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(13, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(28, 181, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(13, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(14, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(14, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.tableWidget.setItem(14, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        brush = QtGui.QBrush(QtGui.QColor(199, 232, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        item.setBackground(brush)
        self.saveButton = QPushButton('保存到表格')
        #self.saveButton.setDown(True)
        #self.saveButton.setStyleSheet("#saveButton {border:0px;color:black;background-color:rgba(246,246,246,100);}\n"
#"#saveButton:hover {font-size:20px;background-color:rgba(246,246,246,200);}\n"
#"#saveButton:pressed {font-size:15px;background-color:rgba(246,246,246,70);}\n")
        self.tableWidget.setCellWidget(14,0,self.saveButton)
        self.saveButton.clicked.connect(self.savexls)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(100)
        self.tableWidget.horizontalHeader().setHighlightSections(True)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(True)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(False)
        self.tableWidget.verticalHeader().setHighlightSections(False)
        self.tableWidget.verticalHeader().setSortIndicatorShown(False)
        self.tableWidget.verticalHeader().setStretchLastSection(True)
        self.gridLayout_2.addWidget(self.tableWidget, 1, 1, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem14, 1, 2, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(25, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_2.addItem(spacerItem15, 2, 1, 1, 1)
        self.verticalLayout.addWidget(self.frame_4)
        self.gridLayout.addWidget(self.widget, 1, 1, 1, 1)
        spacerItem16 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem16, 1, 2, 1, 1)
        spacerItem17 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem17, 2, 1, 1, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        #print(self.testPp)
        #print(self.testPWM)
# {{{
        def countTime():
            _translate = QtCore.QCoreApplication.translate
            global sec
            sec += 1
            self.label_14.setText(_translate("Dialog","已用时:"+str(sec)+"s"))

        self.timeThread = CountThread(self)
        self.timeThread.timer.connect(countTime)
        #self.timeThread.end.connect(self.end)
        self.timeThread.start()
        
# }}}
        
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "自动检测"))
        self.label_2.setText(_translate("Dialog", str(Numrecord)))
        self.label_3.setText(_translate("Dialog", "项"))
        self.label_4.setText(_translate("Dialog", "电压制式:"))
        if self.Volt_AutoWid == 0:
            self.label_5.setText(_translate("Dialog",'12V'))
        elif self.Volt_AutoWid == 1:
            self.label_5.setText(_translate("Dialog",'24V'))
        self.label_8.setText(_translate("Dialog", "搭铁型式:"))
        if self.Side_AutoWid == 0:
            self.label_9.setText(_translate("Dialog",'内搭铁'))
        elif self.Side_AutoWid == 1:
            self.label_9.setText(_translate("Dialog",'外搭铁'))
        elif self.Side_AutoWid == 2:
            self.label_9.setText(_translate("Dialog",'大电流'))
        self.label_6.setText(_translate("Dialog", "发电机型号:"))
        self.label_7.setText(_translate("Dialog", "型号1"))
        self.label_13.setText(_translate("Dialog", "<html><head/><body><p>测试进度</p><p><span style=\" font-size:11pt;\">测试中...</span></p><p><br/></p></body></html>"))
        self.label_14.setText(_translate("Dialog", "已用时:0s"))
        self.label_10.setText(_translate("Dialog", "已检测出"))
        self.label_11.setText(_translate("Dialog", "0"))
        self.label_12.setText(_translate("Dialog", "项异常"))
        self.tableWidget.setSortingEnabled(True)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "测试项"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "测试状态"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "测试结果"))
        __sortingEnabled = self.tableWidget.isSortingEnabled()
        self.tableWidget.setSortingEnabled(False)
        item = self.tableWidget.item(0, 0)
        item = self.tableWidget.item(0, 1)
        item = self.tableWidget.item(0, 2)
        item = self.tableWidget.item(1, 0)
        item = self.tableWidget.item(1, 1)
        #item.setText(_translate("Dialog", "异常"))
        item = self.tableWidget.item(1, 2)
        item = self.tableWidget.item(5, 0)
        item = self.tableWidget.item(5, 1)
        item = self.tableWidget.item(5, 2)
        self.tableWidget.setSortingEnabled(__sortingEnabled)
        
    def savexls(self):
        workbook = xlwt.Workbook(encoding='utf-8')
#设置excel表名
        sheet = workbook.add_sheet('测试结果')
        for x in range(self.tableWidget.rowCount()):
            sheet.write(x,0,self.tableWidget.item(x,0).text())
            sheet.write(x,1,self.tableWidget.item(x,1).text())
            sheet.write(x,2,self.tableWidget.item(x,2).text())
        workbook.save('测试结果.xls')

# }}}


    def updateValue(self):
        global count,Totaltestnum
        count+=1
        #print('触发几次:'+str(count))
        #print('共几项'+str(Totaltestnum))
        #print('每次加百分之几'+str(int(100/Totaltestnum)))
        
        self._value += int(100/Totaltestnum)
        #print(str(self._value))
        self._widgets[0].value = self._value
#真的会大于100吗不会吧不会吧
        #if self._value > 100:
            #self._value = 0
        #print('当前是第几项'+str(self.currentNum))
        if self.currentNum==Totaltestnum:
            self._widgets[0].value=100
            count=0
            _translate = QtCore.QCoreApplication.translate
            self.label_13.setText(_translate("Dialog", "<html><head/><body><p>测试进度</p><p><span style=\" font-size:11pt;\">测试完成!</span></p><p><br/></p></body></html>"))
            self.timeThread.terminate()
            #self.netThread.TCP_Close()
            #self.netThread.terminate()
            print('下一次'+str(Totaltestnum))
    def closeEvent(self,event):
        global sec
        sec=0
        self.timeThread.terminate()
        self.netThread.TCP_Close()
        self.netThread.terminate()
        print('All thread interrupt')
# }}}




# {{{ ManualTest

class Ui_Manual(QDialog):
    Error = pyqtSignal(str)
    def __init__(self,Volt_MainWid,Side_MainWid,Pp_MainWid,Pwm_MainWid,Num_MainWid,List_MainWid,Pid_MainWid,FM_MainWid,type_MainWid):
        super(Ui_Manual, self).__init__()
        self.Volt_Manual=Volt_MainWid
        self.Side_Manual=Side_MainWid
        self.Pp_Manual=Pp_MainWid
        self.Pwm_Manual=Pwm_MainWid
        self.Num_Manual=Num_MainWid
        self.List_Manual=List_MainWid
        self.Pid_Manual=Pid_MainWid
        self.FM_Manual=FM_MainWid
        self.Type_Manual=type_MainWid
        self.setupUi(self)

        self.Mnualsk = socket.socket()
        self.Mnualsk.settimeout(3)

        try:
            #self.Mnualsk.connect(('169.254.124.29', 8088))
            self.Mnualsk.connect(('192.168.1.29', 8088))
        except:
            print("Can't connection!")
            #Flag_ManualErro = True
            self.warning = QMessageBox.warning(self,
                                        "警告",  
                                        "无法建立网络连接!",  
                                        QMessageBox.Abort) 
            self.Error.emit('Erro')        
        else:
            self.Error.emit('1')
            self.Mnualsk.settimeout(10)
            self.M_ItemThread = ManualindividualThread(self.Mnualsk,self.Volt_Manual,self.Side_Manual,self.Pp_Manual,self.Pwm_Manual,self.FM_Manual)
            #self.M_ItemThread.Lin_Sig.connect(self.Linrefre)
            #self.M_ItemThread.Lin_Volt.connect(self.Buttonrefre)
            self.M_ItemThread.start()
            print('connected!')

    def Linrefre(self,str1,str2,str3):
        _translate = QtCore.QCoreApplication.translate
        if str1==0:
            self.label_13.setText('A1')
        elif str1==1:
            self.label_13.setText('A2')
        elif str1==2:
            self.label_13.setText('A3')
        elif str1==3:
            self.label_13.setText('A4')
        elif str1==4:
            self.label_13.setText('B1')
        elif str1==5:
            self.label_13.setText('B2')
        elif str1==6:
            self.label_13.setText('B3')
        elif str1==7:
            self.label_13.setText('B4')
        elif str1==8:
            self.label_13.setText('C')
        elif str1==9:
            self.label_13.setText('D1')
        elif str1==10:
            self.label_13.setText('D2')
        elif str1==11:
            self.label_13.setText('E')
        elif str1==12:
            self.label_13.setText('F')
        self.label_10.setText(str(str2))
        if str3==0:
            self.label_12.setText('BOSCH')
        elif str3==1:
            self.label_12.setText('Valeo')
        elif str3==2:
            self.label_12.setText('Delphi')
        elif str3==3:
            self.label_12.setText('Hitachi')
        elif str3==4:
            self.label_12.setText('Denso')
        elif str3==5:
            self.label_12.setText('Melco')
        elif str3==6:
            self.label_12.setText('Visteon')
        else:
            self.label_12.setText('海科')
    def Buttonrefre(self,str):
        _translate = QtCore.QCoreApplication.translate
        if str=='lon':
            self.pushButton_6.setStyleSheet('A1')
        elif str=='lof':
            self.pushButton_6.setText('A2')
        elif str=='ion':
            self.pushButton_7.setText('A3')
        elif str=='iof':
            self.pushButton_7.setText('A4')
        elif str=='son':
            self.pushButton_8.setText('B1')
        elif str=='sof':
            self.pushButton_8.setText('B2')
    def aaa(self,ret1,ret2,int1,int2):
        #print(int1)
        _translate = QtCore.QCoreApplication.translate
        self.label_69.setText('%.2f'% ret1)
        self.label_65.setText('%.2f'% ret2)
        self.updateCure(int1,int2)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1650, 1010)
        Dialog.setWindowFlags(Qt.WindowMaximizeButtonHint | Qt.MSWindowsFixedSizeDialogHint)
        #Dialog.setWindowFlags(Qt.FramelessWindowHint)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setMinimumSize(QtCore.QSize(1650, 1010))
        Dialog.setMaximumSize(QtCore.QSize(1650, 1010))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        Dialog.setFont(font)
        Dialog.setStyleSheet("#Dialog {background-color:#40434A;}")
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(9, 0, 1631, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.widget.setStyleSheet("#widget{\n"
"background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #0A5EB6, stop:1 #6489B4);\n"
"color:#F3F8FA;border-top-right-radius: 20px;border:0px;}")
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("#label{color:#F3F8FA}")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("#label_2{\n"
"color:#F3F8FA}\n")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("#label_3{\n"
"color:#F3F8FA}\n")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        spacerItem = QtWidgets.QSpacerItem(528, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton_10 = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_10.sizePolicy().hasHeightForWidth())
        self.pushButton_10.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(1)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_10.setStyleSheet("#pushButton_10{\n"
"background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #0A5EB6, stop:1 #6489B4);border:0px;}")
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout.addWidget(self.pushButton_10)
        self.pushButton_10.setFlat(True)
        self.pushButton_10.setDisabled(True)
        self.pushButton_11 = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_11.sizePolicy().hasHeightForWidth())
        self.pushButton_11.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(1)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_11.setStyleSheet("#pushButton_11{\n"
"color:#F3F8FA;\n"
"font-size:13px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #1566BF, stop:1 #0454A9);\n"
"border:0px;\n"
"}\n"
"#pushButton_11:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FFFFFF, stop:1 #0454A9);\n"
"color:#40434A;\n"
"}\n"
"#pushButton_11:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_11.setDefault(False)
        self.pushButton_11.setFlat(False)
        self.pushButton_11.setObjectName("pushButton_11")
        self.horizontalLayout.addWidget(self.pushButton_11)
        self.pushButton_11.clicked.connect(self.showMinimized)
        self.pushButton_12 = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_12.sizePolicy().hasHeightForWidth())
        self.pushButton_12.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_12.setFont(font)
        self.pushButton_12.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_12.setStyleSheet("#pushButton_12{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #EE971C, stop:1 #EA8C06);\n"
"border-top-right-radius: 20px; \n"
"\n"
"}\n"
"#pushButton_12:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FFFFFF, stop:1 #EA8C06);\n"
"color:#40434A;\n"
"font-style:bold;\n"
"}\n"
"\n"
"#pushButton_12:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_12.setObjectName("pushButton_12")
        self.horizontalLayout.addWidget(self.pushButton_12)
        def closeEvent():
            global Flag_LinVolt,data1,data2
            if Flag_LinVolt == True:
                print('LIN还发着您就关,特没谱都没您会玩')
                Flag_LinVolt = False
                self.T_delay.terminate()
				
            self.Mnualsk.close()
            if self.pushButton.isChecked():
                self.MaTCPTHread.terminate()
                self.ManualrecvThread.terminate()
            self.PushButtonDisable()
            self.M_ItemThread.terminate()
            self.p1.removeItem(self.curve)
            data1.clear()
            data2.clear()
            self.curve.setData(data1)
            self.curve2.setData(data2)
            self.ptr = 0
            self.close()
            print('关闭')
        self.pushButton_12.clicked.connect(closeEvent)
        self.widget_2 = QtWidgets.QWidget(Dialog)
        self.widget_2.setGeometry(QtCore.QRect(10, 50, 1631, 91))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setMaximumSize(QtCore.QSize(16777215, 500))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.widget_2.setFont(font)
        self.widget_2.setStyleSheet("#widget_2 {\n"
"background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #E5EEF7, stop:0.95 #FFFFFF);\n"
"border-bottom-right-radius: 50px; \n"
"border-bottom-left-radius: 50px; \n"
"}")
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 2)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem1 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_16 = QtWidgets.QLabel(self.widget_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setBold(False)
        font.setWeight(50)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("")
        self.label_16.setObjectName("label_16")
        self.verticalLayout_7.addWidget(self.label_16)
        

        def showTime(self):
            time = QDateTime.currentDateTime()
            timeDisplay_label16 = time.toString("yyyy年-MM月-dd日")
            timeDisplay_label17 = time.toString("hh:mm:ss dddd")
            self.label_16.setText(timeDisplay_label16)
            self.label_17.setText(timeDisplay_label17)

        self.label_7 = QtWidgets.QLabel(self.widget_2)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_7.addWidget(self.label_7)
        self.horizontalLayout_2.addLayout(self.verticalLayout_7)
        spacerItem2 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_5 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("#label_5{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFBFD, stop:0.5 #0C5CB3);\n"
"border-top-right-radius: 20px; \n"
"\n"
"}")
        self.label_5.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_6.addWidget(self.label_5)

        self.label_69 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_69.sizePolicy().hasHeightForWidth())
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(30)
        font.setBold(False)
        font.setWeight(50)
        self.label_69.setFont(font)
        self.label_69.setStyleSheet("#label_69 {\n"
"\n"
"color:yellow;\n"
"background-color:rgba(8,53,104,150);\n"
"\n"
"\n"
"}")
        self.label_69.setFrameShape(QtWidgets.QFrame.Box)
        self.label_69.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_69.setAlignment(QtCore.Qt.AlignVCenter|QtCore.Qt.AlignHCenter)
        self.label_69.setObjectName("label_69")
        self.verticalLayout_6.addWidget(self.label_69)

        self.verticalLayout_6.setStretch(0, 3)
        self.verticalLayout_6.setStretch(1, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_8 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("#label_8{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFBFD, stop:0.5 #0C5CB3);\n"
"border-top-right-radius: 20px; \n"
"\n"
"}")
        self.label_8.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_5.addWidget(self.label_8)

        self.label_65 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_65.sizePolicy().hasHeightForWidth())
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(30)
        font.setBold(False)
        font.setWeight(50)
        self.label_65.setFont(font)
        self.label_65.setStyleSheet("#label_65 {\n"
"\n"
"color:yellow;\n"
"background-color:rgba(8,53,104,150);\n"
"\n"
"\n"
"}")
        self.label_65.setFrameShape(QtWidgets.QFrame.Box)
        self.label_65.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_65.setAlignment(QtCore.Qt.AlignVCenter|QtCore.Qt.AlignHCenter)
        self.label_65.setObjectName("label_65")
        self.verticalLayout_5.addWidget(self.label_65)

        self.verticalLayout_5.setStretch(0, 3)
        self.verticalLayout_5.setStretch(1, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("#label_4{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFBFD, stop:0.5 #0C5CB3);\n"
"border-top-right-radius: 20px; \n"
"\n"
"}")
        self.label_4.setLineWidth(0)
        self.label_4.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.label_13 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setMinimumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(30)
        font.setBold(False)
        font.setWeight(50)
        self.label_13.setFont(font)
        self.label_13.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.label_13.setStyleSheet("#label_13 {\n"
"\n"
"color:yellow;\n"
"background-color:rgba(8,53,104,150);\n"
"\n"
"\n"
"}")
        self.label_13.setFrameShape(QtWidgets.QFrame.Box)
        self.label_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.verticalLayout_4.addWidget(self.label_13)
        self.verticalLayout_4.setStretch(0, 3)
        self.verticalLayout_4.setStretch(1, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem5)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_9 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("#label_9{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFBFD, stop:0.5 #0C5CB3);\n"
"border-top-right-radius: 20px; \n"
"\n"
"}")
        self.label_9.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_3.addWidget(self.label_9)
        self.label_10 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setMinimumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(30)
        font.setBold(False)
        font.setWeight(50)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("#label_10 {\n"
"\n"
"color:yellow;\n"
"background-color:rgba(8,53,104,150);\n"
"\n"
"\n"
"}")
        self.label_10.setFrameShape(QtWidgets.QFrame.Box)
        self.label_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_3.addWidget(self.label_10)
        self.verticalLayout_3.setStretch(0, 3)
        self.verticalLayout_3.setStretch(1, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem6)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_11 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("#label_11{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFBFD, stop:0.5 #0C5CB3);\n"
"border-top-right-radius: 20px; \n"
"\n"
"}")
        self.label_11.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_2.addWidget(self.label_11)
        self.label_12 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setMinimumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(30)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("#label_12 {\n"
"\n"
"color:yellow;\n"
"background-color:rgba(8,53,104,150);\n"
"\n"
"\n"
"}")
        self.label_12.setFrameShape(QtWidgets.QFrame.Box)
        self.label_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_2.addWidget(self.label_12)
        self.verticalLayout_2.setStretch(0, 3)
        self.verticalLayout_2.setStretch(1, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_17 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        self.label_17.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_17.setFont(font)
        self.label_17.setStyleSheet("#label_17{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFBFD, stop:0.5 #0C5CB3);\n"
"border-top-right-radius: 20px; \n"
"\n"
"}")
        self.label_17.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignHCenter)
        self.label_17.setObjectName("label_17")
        self.verticalLayout.addWidget(self.label_17)
        self.label_18 = QtWidgets.QLabel(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_18.sizePolicy().hasHeightForWidth())
        self.label_18.setSizePolicy(sizePolicy)
        self.label_18.setMinimumSize(QtCore.QSize(90, 30))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(30)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("#label_18 {\n"
"\n"
"color:yellow;\n"
"background-color:rgba(8,53,104,150);\n"
"\n"
"\n"
"}")
        self.label_18.setFrameShape(QtWidgets.QFrame.Box)
        self.label_18.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_18.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.verticalLayout.addWidget(self.label_18)
        self.verticalLayout.setStretch(0, 3)
        self.verticalLayout.setStretch(1, 5)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem8)
        self.widget_9 = QtWidgets.QWidget(Dialog)
        self.widget_9.setGeometry(QtCore.QRect(10, 150, 1621, 431))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_9.sizePolicy().hasHeightForWidth())
        self.widget_9.setSizePolicy(sizePolicy)
        self.widget_9.setMaximumSize(QtCore.QSize(5000, 5000))
        self.widget_9.setStyleSheet("")
        self.widget_9.setObjectName("widget_9")
        self.frame = QtWidgets.QFrame(self.widget_9)
        self.frame.setGeometry(QtCore.QRect(30, 10, 1551, 411))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setStyleSheet("#frame {\n"
"\n"
"background-color:rgb(229,238,247);\n"
"border-radius:10px;\n"
"border:5px;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setLineWidth(2)
        self.frame.setMidLineWidth(0)
        self.frame.setObjectName("frame")
        
       
        self.win = pg.GraphicsLayoutWidget(self.frame,show=True)
        self.win.setGeometry(QtCore.QRect(10, 10, 1531, 391))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.win.sizePolicy().hasHeightForWidth())
        self.win.setSizePolicy(sizePolicy)
        self.win.setStyleSheet("#win{background-color: rgb(232, 232, 255);}")
        #self.win.setStyleSheet("#win{background-color:rgb(64,67,74);border-radius:10px}")
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.NoBrush)
        self.win.setBackgroundBrush(brush)
        self.win.setObjectName("win")

        self.p1 = self.win.addPlot()
        self.p1.setXRange(20,280)
        self.p1.setYRange(0,1)
        self.p1.setLabel('bottom', '延时', **{'font-size':'20pt'})
        self.p1.getAxis('bottom').setPen(pg.mkPen(color='#000000', width=3))
        self.p1.setLabel('left', 'EXC', 
                    color='#c4380d', **{'font-size':'20pt'})
        self.p1.getAxis('left').setPen(pg.mkPen(color='#c4380d', width=3))
        self.p1.showAxis('right')
        #p1.setLabel('right', 'FM', units="V",
                    #color='#025b94', **{'font-size':'20pt'})
        self.p1.setLabel('right', 'FM',color='#025b94', **{'font-size':'20pt'})
        self.p1.getAxis('right').setPen(pg.mkPen(color='#025b94', width=3))

        self.p2 = pg.ViewBox()
        self.p1.scene().addItem(self.p2)
        self.p1.getAxis('right').linkToView(self.p2)
        self.p2.setXLink(self.p1)
        self.p2.setYRange(0,1)

        self.curve = self.p1.plot(data1, pen=pg.mkPen(color='#c4380d',width=1))
        self.curve2 = pg.PlotCurveItem(pen=pg.mkPen(color='#025b94', width=1))
        self.p2.addItem(self.curve2)
        def updateViews():
            #global p2
            self.p2.setGeometry(self.p1.getViewBox().sceneBoundingRect())
            self.p2.linkedViewChanged(self.p1.getViewBox(), self.p2.XAxis)
#似乎是绘图前调整曲线2的位置
        updateViews()
        self.p1.getViewBox().sigResized.connect(updateViews)

        self.ptr = 0

        self.curve.setData(data2)
        self.curve2.setData(data1)

        
        self.widget_6 = QtWidgets.QWidget(Dialog)
        self.widget_6.setGeometry(QtCore.QRect(10, 590, 1632, 411))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_6.sizePolicy().hasHeightForWidth())
        self.widget_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("SimSun")
        font.setPointSize(13)
        self.widget_6.setFont(font)
        self.widget_6.setStyleSheet("#widget_6{\n"
"background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #FFFFFF, stop:0.05 #E5EEF7);\n"
"\n"
"border-top-right-radius: 50px; \n"
"border-top-left-radius: 50px; \n"
"}")
        self.widget_6.setObjectName("widget_6")
        self.widget_5 = QtWidgets.QWidget(self.widget_6)
        self.widget_5.setGeometry(QtCore.QRect(900, 21, 260, 370))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_5.sizePolicy().hasHeightForWidth())
        self.widget_5.setSizePolicy(sizePolicy)
        self.widget_5.setMinimumSize(QtCore.QSize(200, 200))
        self.widget_5.setStyleSheet("#widget_5{\n"
"\n"
"background-color:rgb(255,255,255);\n"
"border-radius:30px\n"
"}")
        self.widget_5.setObjectName("widget_5")

        #self.dial_2.valueChanged.connect(self.la)
        self.lcdNumber_5 = QtWidgets.QLCDNumber(self.widget_5)
        self.lcdNumber_5.setGeometry(QtCore.QRect(20, 10, 221, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_5.sizePolicy().hasHeightForWidth())
        self.lcdNumber_5.setSizePolicy(sizePolicy)
        self.lcdNumber_5.setStyleSheet("#lcdNumber_5 {\n"
"color:yellow;\n"
"background-color:rgba(64,67,74,200);\n"
"}")
        self.lcdNumber_5.setObjectName("lcdNumber_5")
        self.label_15 = QtWidgets.QLabel(self.widget_5)
        self.label_15.setGeometry(QtCore.QRect(20, 80, 80, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("#label_15{\n"
"background-color:rgb(250,251,253);\n"
"\n"
"}")
        self.label_15.setObjectName("label_15")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget_5)
        self.lineEdit_2.setGeometry(QtCore.QRect(110, 70, 130, 40))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_2.sizePolicy().hasHeightForWidth())
        self.lineEdit_2.setSizePolicy(sizePolicy)
        self.lineEdit_2.setObjectName("lineEdit_2")
        


        self.widget_4 = QtWidgets.QWidget(self.widget_6)
        self.widget_4.setGeometry(QtCore.QRect(450, 21, 260, 370))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_4.sizePolicy().hasHeightForWidth())
        self.widget_4.setSizePolicy(sizePolicy)
        self.widget_4.setMinimumSize(QtCore.QSize(200, 200))
        self.widget_4.setStyleSheet("#widget_4{\n"
"background-color:rgb(255,255,255);\n"
"border-radius:30px\n"
"\n"
"}")
        self.widget_4.setObjectName("widget_4")
        self.lcdNumber_2 = QtWidgets.QLCDNumber(self.widget_4)
        self.lcdNumber_2.setGeometry(QtCore.QRect(20, 10, 221, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lcdNumber_2.sizePolicy().hasHeightForWidth())
        self.lcdNumber_2.setSizePolicy(sizePolicy)
        self.lcdNumber_2.setStyleSheet("#lcdNumber_2 {\n"
"color:yellow;\n"
"background-color:rgba(64,67,74,200);\n"
"}")
        self.lcdNumber_2.setFrameShape(QtWidgets.QFrame.Box)
        self.lcdNumber_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        def dial_to6000():
            global rpm
            ret=self.dial.value()
            
            if self.overflag==False:
                if ret>6000:
                    rpm=6000
                    self.dial.setValue(6000)
                    self.lcdNumber_2.display(6000)
                else:
                    rpm=ret
                    self.lcdNumber_2.display(ret)
            else: 
                rpm=6000
                self.overflag = False
                self.lcdNumber_2.display(6000)
                self.dial.setValue(6000)
        def dial_tolcd():
            global rpm
            ret=self.dial.value()
            if ret <=6000:
                self.lcdNumber_2.display(ret)
                rpm=ret
            else: 
                self.overflag=True
                rpm=6000
                self.lcdNumber_2.display(6000)
                self.dial.setValue(6000)

        self.dial = QtWidgets.QDial(self.widget_4)
        self.dial.setGeometry(QtCore.QRect(20, 130, 220, 220))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dial.sizePolicy().hasHeightForWidth())
        self.dial.setSizePolicy(sizePolicy)
        self.dial.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.dial.setNotchesVisible(True)
        self.dial.setObjectName("dial")
        self.dial.setDisabled(True)
        self.dial.setRange(0,6002)
        #self.dial.sliderMoved['int'].connect(self.lcdNumber_2.display)
        self.dial.sliderMoved['int'].connect(dial_tolcd)
        self.dial.sliderReleased.connect(dial_to6000)

        self.dial_2 = QtWidgets.QDial(self.widget_5)
        self.dial_2.setGeometry(QtCore.QRect(20, 130, 220, 220))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dial_2.sizePolicy().hasHeightForWidth())
        self.dial_2.setSizePolicy(sizePolicy)
        self.dial_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.dial_2.setNotchesVisible(True)
        self.dial_2.setObjectName("dial_2")
        self.dial_2.setDisabled(True)
        self.dial_2.setRange(0,81.000)
        self.dial_2.setMaximum(81.000)

        self.overflag = False
        def dial2_to80():
            global load
            ret=self.dial_2.value()
            
            if self.overflag==False:
                if ret>80:
                    load=80.00
                    self.dial_2.setValue(80.00)
                    self.lcdNumber_5.display(80.00)
                else:
                    load=ret
                    self.lcdNumber_5.display(ret)
            else: 
                load=80.00
                self.overflag = False
                self.lcdNumber_5.display(80.00)
                self.dial_2.setValue(80.00)
        def dial2_tolcd():
            global load
            ret=self.dial_2.value()
            
            if ret <=80.00:
                load=ret
                self.lcdNumber_5.display(ret)
            else: 
                load=80.00
                self.overflag=True
                self.lcdNumber_5.display(80.00)
                self.dial_2.setValue(80.00)
        self.dial_2.sliderMoved['int'].connect(dial2_tolcd)
        self.dial_2.sliderReleased.connect(dial2_to80)
        self.label_14 = QtWidgets.QLabel(self.widget_4)
        self.label_14.setGeometry(QtCore.QRect(20, 80, 81, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("#label_14{\n"
"background-color:rgb(250,251,253);\n"
"}")
        self.label_14.setObjectName("label_14")
        self.lineEdit = QtWidgets.QLineEdit(self.widget_4)
        self.lineEdit.setGeometry(QtCore.QRect(110, 70, 130, 40))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setPlaceholderText('0-6000')

        self.pIntvalidator=QIntValidator(self)
        self.pIntvalidator.setRange(0,6000)

        #设置验证器
        self.lineEdit.setValidator(self.pIntvalidator)
        def dialsetValue():
            global rpm
            self.dial.setValue(int(self.lineEdit.text()))
            self.lcdNumber_2.display(int(self.lineEdit.text()))
            rpm = int(self.lineEdit.text())
        def dial_2setValue():
            global load
            self.dial_2.setValue(float(self.lineEdit_2.text()))
            self.lcdNumber_5.display(float(self.lineEdit_2.text()))
            load = int(self.lineEdit_2.text())           
        self.lineEdit.returnPressed.connect(dialsetValue)


        self.pDoubleValidator=QDoubleValidator()
        self.pDoubleValidator.setRange(0,80)

        self.pDoubleValidator.setNotation(QDoubleValidator.StandardNotation)
        #设置精度小数点后两位
        self.pDoubleValidator.setDecimals(2)
        self.lineEdit_2.setValidator(self.pDoubleValidator)
        self.lineEdit_2.setPlaceholderText('0-80.00')
        self.lineEdit_2.returnPressed.connect(dial_2setValue)
        self.pushButton_6 = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_6.setGeometry(QtCore.QRect(120, 20, 190, 110))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_6.setFont(font)
        self.pushButton_6.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_6.setStyleSheet("#pushButton_6{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);\n"
"border-radius: 30px; \n"
"}\n"
"#pushButton_6:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #6CB0E7, stop:1 #398AC9);\n"
"color:#40434A;\n"
"font-style:bold;\n"
"}\n"
"#pushButton_6:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.setCheckable(True)
        self.pushButton_6.setDisabled(True)
        self.pushButton_6.clicked.connect(self.setLamp)
        self.pushButton_8 = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_8.setGeometry(QtCore.QRect(120, 270, 190, 110))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_8.setFont(font)
        self.pushButton_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_8.setStyleSheet("#pushButton_8{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);\n"
"border-radius: 30px; \n"
"}\n"
"#pushButton_8:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #6CB0E7, stop:1 #398AC9);\n"
"color:#40434A;\n"
"font-style:bold;\n"
"}\n"
"#pushButton_8:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.setCheckable(True)
        self.pushButton_8.clicked.connect(self.setSense)
        self.pushButton_8.setDisabled(True)
        self.pushButton_7 = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_7.setGeometry(QtCore.QRect(120, 145, 190, 110))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_7.setFont(font)
        self.pushButton_7.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_7.setStyleSheet("#pushButton_7{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);\n"
"border-radius: 30px; \n"
"\n"
"}\n"
"#pushButton_7:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #6CB0E7, stop:1 #398AC9);\n"
"color:#40434A;\n"
"font-style:bold;\n"
"}\n"
"\n"
"#pushButton_7:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.setCheckable(True)
        self.pushButton_7.setDisabled(True)
        self.pushButton_7.clicked.connect(self.setIGN)
        self.pushButton_7.setDisabled(True)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_3.setGeometry(QtCore.QRect(1200, 60, 190, 110))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_3.setFont(font)
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setStyleSheet("#pushButton_3{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);\n"
"border-radius: 55px; \n"
"\n"
"}\n"
"#pushButton_3:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #6CB0E7, stop:1 #398AC9);\n"
"color:#40434A;\n"
"font-style:bold;\n"
"}\n"
"\n"
"#pushButton_3:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.CheckGenID)
        self.pushButton_3.setDisabled(True)
        self.pushButton_4 = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_4.setGeometry(QtCore.QRect(1200, 210, 190, 110))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_4.setFont(font)
        self.pushButton_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_4.setStyleSheet("#pushButton_4{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);\n"
"border-radius: 55px; \n"
"\n"
"}\n"
"#pushButton_4:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #6CB0E7, stop:1 #398AC9);\n"
"color:#40434A;\n"
"font-style:bold;\n"
"}\n"
"\n"
"#pushButton_4:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.ClearLin)
        self.pushButton_4.setDisabled(True)
        self.pushButton = QtWidgets.QPushButton(self.widget_6)
        self.pushButton.setGeometry(QtCore.QRect(725, 240, 160, 160))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(110, 110))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("\n"
"#pushButton{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);\n"
"border-radius: 80px; \n"
"\n"
"}\n"
"#pushButton:hover { \n"
"font-size:20px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #E85657, stop:1 #D34143);\n"
"color:#F1BC70;\n"
"font-style:bold;\n"
"}\n"
"\n"
"#pushButton:pressed { \n"
"font-size:15px;\n"
"}\n"
"\n"
"")
        self.pushButton.setCheckable(True)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.PowerOn)
        self.frame_2 = QtWidgets.QFrame(self.widget_6)
        self.frame_2.setGeometry(QtCore.QRect(1400, 50, 201, 271))
        self.frame_2.setStyleSheet("#frame_2{\n"
"\n"
"\n"
"background-color: lightgreen;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.widget_6)
        self.pushButton_5.setGeometry(QtCore.QRect(1405, 60, 190, 110))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_5.setFont(font)
        self.pushButton_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_5.setStyleSheet("#pushButton_5{\n"
"color:#F3F8FA;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);\n"
"border-radius: 40px; \n"
"\n"
"}\n"
"#pushButton_5:hover { \n"
"font-size:15px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #6CB0E7, stop:1 #398AC9);\n"
"color:#40434A;\n"
"font-style:bold;\n"
"}\n"
"\n"
"#pushButton_5:pressed { \n"
"font-size:12px;\n"
"}")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.SendLin)
        self.pushButton_5.setDisabled(True)
        self.spinBox = QtWidgets.QDoubleSpinBox(self.widget_6)
        self.spinBox.setGeometry(QtCore.QRect(1421, 220, 161, 81))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.spinBox.sizePolicy().hasHeightForWidth())
        self.spinBox.setSizePolicy(sizePolicy)
        self.spinBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.spinBox.setStyleSheet("#spinBox{}\n"
"")
        self.spinBox.setObjectName("spinBox")
        self.spinBox.setRange(10.6,16.0)
        self.spinBox.setSingleStep(0.1)
        self.spinBox.setDisabled(True)
        #print('调节器类型')
        #print(self.Type_Manual)
        #print(type(self.Type_Manual))
        
        #print(self.Type_Manual)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Z-001"))
        self.label_2.setText(_translate("Dialog", "调节器测试台"))
        self.label_3.setText(_translate("Dialog", "手动测试界面"))
        self.pushButton_10.setText(_translate("Dialog", "最小化"))
        self.pushButton_11.setText(_translate("Dialog", "最小化"))
        self.pushButton_12.setText(_translate("Dialog", "关闭"))
        self.label_16.setText(_translate("Dialog", "11:00 星期一"))
        self.label_7.setText(_translate("Dialog", "2020年1月1日"))
        self.label_5.setText(_translate("Dialog", "调节电压/V"))
        self.label_8.setText(_translate("Dialog", "相信号幅值/V"))
        self.label_4.setText(_translate("Dialog", "LIN版本"))
        self.label_13.setText(_translate("Dialog", ""))
        self.label_9.setText(_translate("Dialog", "调节器ID"))
        self.label_10.setText(_translate("Dialog", ""))
        self.label_11.setText(_translate("Dialog", "发电机厂商"))
        self.label_12.setText(_translate("Dialog", ""))
        self.label_17.setText(_translate("Dialog", "电压制式/V"))
        if self.Volt_Manual==0:
            self.label_18.setText(_translate("Dialog", "12"))
        elif self.Volt_Manual==1:
            self.label_18.setText(_translate("Dialog", "24"))
        self.label_15.setText(_translate("Dialog", "负载/A"))
        self.label_14.setText(_translate("Dialog", "转速/RPM"))
        self.pushButton_6.setText(_translate("Dialog", "LAMP开关"))
        self.pushButton_8.setText(_translate("Dialog", "SENSE开关"))
        self.pushButton_7.setText(_translate("Dialog", "IGN开关"))
        self.pushButton_3.setText(_translate("Dialog", "识别调节器/LIN"))
        self.pushButton_4.setText(_translate("Dialog", "清空LIN"))
        self.pushButton.setText(_translate("Dialog", "POWER"))
        self.pushButton_5.setText(_translate("Dialog", "发送LIN电压"))

    def PushButtonEnable(self):
        if self.Type_Manual==0:
            print('LIN')
            self.pushButton_3.setEnabled(True)
            self.pushButton_4.setEnabled(True)
            self.pushButton_5.setEnabled(True)
            self.spinBox.setEnabled(True)
            self.dial.setEnabled(True)
            self.dial_2.setEnabled(True)
            self.label_69.setEnabled(True)
            self.label_65.setEnabled(True)
            self.label_13.setEnabled(True)
            self.label_10.setEnabled(True)
            self.label_12.setEnabled(True)
            self.label_18.setEnabled(True)
        elif self.Type_Manual==1:
            print('多功能')
            self.pushButton_6.setEnabled(True)
            self.pushButton_7.setEnabled(True)
            self.pushButton_8.setEnabled(True)
            self.dial.setEnabled(True)
            self.dial_2.setEnabled(True)
            self.label_69.setEnabled(True)
            self.label_65.setEnabled(True)
            self.label_13.setEnabled(True)
            self.label_10.setEnabled(True)
            self.label_12.setEnabled(True)
            self.label_18.setEnabled(True)
        elif self.Type_Manual==2:
            print('单功能')
            self.dial.setEnabled(True)
            self.dial_2.setEnabled(True)
            self.label_69.setEnabled(True)
            self.label_65.setEnabled(True)
            self.label_13.setEnabled(True)
            self.label_10.setEnabled(True)
            self.label_12.setEnabled(True)
            self.label_18.setEnabled(True)

    def PushButtonDisable(self):
        if self.Type_Manual==0:
            print('LIN')
            self.pushButton_3.setDisabled(True)
            self.pushButton_4.setDisabled(True)
            self.pushButton_5.setDisabled(True)
            self.spinBox.setDisabled(True)
            self.dial.setDisabled(True)
            self.dial_2.setDisabled(True)
            self.label_69.setDisabled(True)
            self.label_65.setDisabled(True)
            self.label_13.setDisabled(True)
            self.label_10.setDisabled(True)
            self.label_12.setDisabled(True)
            self.label_18.setDisabled(True)
        elif self.Type_Manual==1:
            print('多功能')
            self.pushButton_6.setDisabled(True)
            self.pushButton_7.setDisabled(True)
            self.pushButton_8.setDisabled(True)
            self.dial.setDisabled(True)
            self.dial_2.setDisabled(True)
            self.label_69.setDisabled(True)
            self.label_65.setDisabled(True)
            self.label_13.setDisabled(True)
            self.label_10.setDisabled(True)
            self.label_12.setDisabled(True)
            self.label_18.setDisabled(True)
        elif self.Type_Manual==2:
            print('单功能')
            self.dial.setDisabled(True)
            self.dial_2.setDisabled(True)
            self.label_69.setDisabled(True)
            self.label_65.setDisabled(True)
            self.label_13.setDisabled(True)
            self.label_10.setDisabled(True)
            self.label_12.setDisabled(True)
            self.label_18.setDisabled(True)

    def PowerOn(self):
        global wakup_flag
        if self.pushButton.isChecked():
            self.PushButtonEnable()
            self.MaTCPTHread=ManualHeartBeatThread(self.Volt_Manual,self.Side_Manual,self.Pp_Manual,self.Pwm_Manual,self.FM_Manual,self.Mnualsk)
            #self.MaTCPTHread.M_Sig.connect(self.aaa)
            #self.RecvThread=self.Mnualsk
            self.ManualrecvThread = recvThread(self.Mnualsk)
            msg = message.put('pon')
            self.ManualrecvThread.M_Sig.connect(self.aaa)
            self.ManualrecvThread.Lin_Sig.connect(self.Linrefre)
            self.ManualrecvThread.start()
            self.MaTCPTHread.start()
            while True:
                if wakup_flag==False:
                    tm.sleep(0.1)
                else:
                    self.M_ItemThread.Wake()
                    break
        else:
            self.PushButtonDisable()
            #print('PowerOff!')
            msg = message.put('pof')
            self.M_ItemThread.Wake()
            self.MaTCPTHread.terminate()
            self.ManualrecvThread.terminate()
    def setLamp(self):
        if self.pushButton_6.isChecked():
            #print('lamp!')
            msg = message.put('lon')
            self.M_ItemThread.Wake()
        else:
            #print('nolamp!')
            msg = message.put('lof')
            self.M_ItemThread.Wake()
    def setIGN(self):
        if self.pushButton_7.isChecked():
            #print('IGN')
            msg = message.put('ion')
            self.M_ItemThread.Wake()
        else:
            #print('NoIGN')
            msg = message.put('iof')
            self.M_ItemThread.Wake()
    def setSense(self):
        if self.pushButton_8.isChecked():
            #print('Sense')
            msg = message.put('son')
            self.M_ItemThread.Wake()
        else:
            #print('NoSense')
            msg = message.put('sof')
            self.M_ItemThread.Wake()
    def CheckGenID(self):
        #print('GenID')
        msg = message.put('lini')
        self.M_ItemThread.Wake()

    def ClearLin(self):
        global Flag_LinVolt
#还没发过,返回
        if Flag_LinVolt == False:
            print('发都没发,清您妈清呢')
            return
#已经发过,清0
        else:
            print('行行行,您屌大您说了算')
            Flag_LinVolt = False
            self.T_delay.terminate()
    def TimelySendLinV(self):
        global Flag_LinVolt,CurrentLinVolt
#确保是发了的
        if Flag_LinVolt ==True and LinID == True:
            CurrentLinVolt = self.spinBox.value()
            self.M_ItemThread.Wake_LinVolt()
        else:
            return 
    def SendLin(self):
        global Flag_LinVolt,LinID
        print('检查')
        print(LinID)
#已经发送,返回
        if Flag_LinVolt==True :
            print('您搁这儿叠BUFF呢')
            return
        if LinID==False:
            print('先查LIN版本')
            return
#还没发送过,置1
        elif Flag_LinVolt == False and LinID==True:
            print('您的东风快递即将抵达')
            Flag_LinVolt = True
            LinID = True
            print('Lin版本:')
            print(LinVer)

            #print('SendLin'+str(self.spinBox.value()))
            #print(Flag_LinVolt)
        

        #msg = message.put('linv')
            self.T_delay = CountThread()
            self.T_delay.timer.connect(self.TimelySendLinV)
            self.T_delay.start()

        
    def updateCure(self,excdata,fmdata):
        #print(excdata)
        global data1,data2
        if len(data1)<300:
            data1.append(excdata)
            data2.append(fmdata)
            self.curve.setData(data2)
            self.curve2.setData(data1)
            self.ptr += 1
        else:
            data1[:-1] = data1[1:]  # shift data in the array one sample left # (see also: np.roll)
            data2[:-1] = data2[1:]
            data1[-1] = excdata
            data2[-1] = fmdata
            self.curve.setData(data2)
            self.curve2.setData(data1)
            self.ptr += 1

        
#MultyMode
# }}}

# {{{ MainWindow

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.testNum_MainWid=0
        self.testList_MainWid=0
        self.setVolt=0
        self.setSide=0
        self.setPp=0
        self.setPWM_EXC=0
        self.setPWM_FM=0
        self.Pid_MainWid=0
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1350, 900)
        MainWindow.setMinimumSize(QtCore.QSize(0, 0))
        MainWindow.setToolTipDuration(0)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)

        self.shadow = QGraphicsDropShadowEffect()
        self.shadow.setBlurRadius(15)
        self.shadow.setOffset(5,5)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("#frame {background-color:rgba(0,0,0,0);}")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout = QtWidgets.QGridLayout(self.frame)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_12 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_12.sizePolicy().hasHeightForWidth())
        self.pushButton_12.setSizePolicy(sizePolicy)
        self.pushButton_12.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_12.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_12.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_12.setFont(font)
        self.pushButton_12.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_12.setStyleSheet("#pushButton_12 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_12:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_12:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")

        self.pushButton_12.setFlat(True)
        self.pushButton_12.setCheckable(True)
        self.pushButton_12.setObjectName("pushButton_12")
        self.gridLayout.addWidget(self.pushButton_12, 5, 2, 1, 1)
        self.pushButton_12.toggle()
        self.pushButton_12.clicked.connect(self.button12State)
        #self.pushButton_12.setGraphicsEffect(self.shadow)

        self.pushButton_29 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_29.sizePolicy().hasHeightForWidth())
        self.pushButton_29.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.pushButton_29.setFont(font)
        self.pushButton_29.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_29.setStyleSheet("#pushButton_29{font-size:25px;border-radius:20px;background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #23AEC1, stop:0.5 #26A0C9,stop:1 #2A8DD0);"
"color:rgb(218,225,238);}"
"#pushButton_29:hover{background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFAFA, stop:0.5 #26A0C9,stop:1 #2A8DD0);border-color:#8AD321;border-width:1px;}")
        self.pushButton_29.setObjectName("pushButton_29")
        self.gridLayout.addWidget(self.pushButton_29, 7, 3, 1, 1)
        self.pushButton_29.clicked.connect(self.choose_Wid)
        self.pushButton_17 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_17.sizePolicy().hasHeightForWidth())
        self.pushButton_17.setSizePolicy(sizePolicy)
        self.pushButton_17.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_17.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_17.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_17.setFont(font)
        self.pushButton_17.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_17.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.pushButton_17.setStyleSheet("#pushButton_17 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_17:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_17:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_17.setCheckable(True)
        self.pushButton_17.setAutoDefault(False)
        self.pushButton_17.setDefault(False)
        self.pushButton_17.setFlat(True)
        self.pushButton_17.setObjectName("pushButton_17")
        self.gridLayout.addWidget(self.pushButton_17, 1, 3, 1, 1)
        self.pushButton_17.clicked.connect(self.button2State)
        self.pushButton_9 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        self.pushButton_9.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_9.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_9.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_9.setFont(font)
        self.pushButton_9.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_9.setStyleSheet("#pushButton_9 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_9:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_9:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_9.setFlat(True)
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.setCheckable(True)
        self.gridLayout.addWidget(self.pushButton_9, 4, 2, 1, 1)
        self.pushButton_9.clicked.connect(self.button9State)
        self.pushButton_31 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_31.sizePolicy().hasHeightForWidth())
        self.pushButton_31.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.pushButton_31.setFont(font)
        self.pushButton_31.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_31.setStyleSheet("#pushButton_31{font-size:25px;background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #E37171,stop:1 #DD6767);"
"border-radius:20px;border:0px;color:rgb(218,225,238);}"
"#pushButton_31:hover{background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFAFA, stop:0.5 #E37171,stop:1 #DD6767);}")
        self.pushButton_31.setObjectName("pushButton_31")
        self.gridLayout.addWidget(self.pushButton_31, 7, 4, 1, 1)
        self.pushButton_31.clicked.connect(self.buttonManualState)
        
        self.widget = QtWidgets.QWidget(self.frame)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_9 = QtWidgets.QLabel(self.widget)
        
        
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        
        
        
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setStyleSheet("#label_9{border-radius:5px;background-color:white;font-family:宋体;font-size:20px;}")
        self.label_9.setObjectName("label_9")
        #self.label_9.setStyleSheet('background-color:white')
        self.label_9.setText("EXC频率/Hz")
        self.verticalLayout.addWidget(self.label_9)
        self.comboBox = QtWidgets.QComboBox(self.widget)
        
        sizePolicy.setHeightForWidth(self.comboBox.sizePolicy().hasHeightForWidth())
        self.comboBox.setSizePolicy(sizePolicy)
        
        
        self.comboBox.setObjectName("comboBox")
        self.verticalLayout.addWidget(self.comboBox)
        self.comboBox.setStyleSheet("#comboBox { \n"
"color:black;"
"border-radius:3px;"
"background-color:#F9F9F9;\n"
"font-size:20px;"
"font-family:微软雅黑;"
"}"
"#comboBox:hover { \n"
"border-width:2px;"
"border-color:#B797FC;"
"border-style:solid;"
"}"
"#comboBox::down-arrow {"
"image:url(./arrow.jpg);"
"}"
)
        self.comboBox.addItem("AVR04")
        self.comboBox.addItem("AVR03")
        self.comboBox.addItem("L9916")
        self.comboBox.addItem("L9918")
        self.comboBox.addItem("CR665D")
        self.comboBox.addItem("AR6000")
        self.comboBox.addItem("TLE8880")
        def setEXC():
            if self.comboBox.currentIndex() ==0:
                self.spinBox.setValue(100)
            elif self.comboBox.currentIndex() ==1:
                self.spinBox.setValue(100)
            elif self.comboBox.currentIndex() ==2:
                self.spinBox.setValue(165)
            elif self.comboBox.currentIndex() ==3:
                self.spinBox.setValue(200)
            elif self.comboBox.currentIndex() ==4:
                self.spinBox.setValue(400)
            elif self.comboBox.currentIndex() ==5:
                self.spinBox.setValue(200)
            elif self.comboBox.currentIndex() ==6:
                self.spinBox.setValue(220)
            else:
                return
        self.gridLayout.addWidget(self.widget, 6, 1, 1, 1)
        self.spinBox = QtWidgets.QSpinBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.spinBox.sizePolicy().hasHeightForWidth())
        self.spinBox.setSizePolicy(sizePolicy)
        self.spinBox.setMinimumSize(QtCore.QSize(50, 50))
        self.spinBox.setStyleSheet("#spinBox { \n"
"color:black;\n"
"font-size:25px;"
"font-family:Calibri;"
"border-radius:5px;\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #FFFFFF,stop:1.0 #1EAFD8);"
"border-width:2;\n"
"border-color:#F6F6F6;\n"
"border-style:solid;\n"
"}\n")
        self.spinBox.setRange(2,300)
        self.spinBox.setValue(100)
        self.spinBox.setSingleStep(1)
        self.spinBox.setObjectName("spinBox")
        self.gridLayout.addWidget(self.spinBox, 6, 2, 1, 1)
        self.comboBox.currentIndexChanged.connect(setEXC)  
        self.spinBox_2 = QtWidgets.QSpinBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.spinBox_2.sizePolicy().hasHeightForWidth())
        self.spinBox_2.setSizePolicy(sizePolicy)
        self.spinBox_2.setStyleSheet("#spinBox_2 { \n"
"color:black;\n"
"font-family:Calibri;"
"border-radius:5px;\n"
"font-size:25px;"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #FFFFFF,stop:1.0 #1EAFD8);"
"border-width:2px;\n"
"border-color:#F6F6F6;\n"
"border-style:solid;\n"
"}\n"
)
        self.spinBox_2.setObjectName("spinBox_2")
        self.spinBox_2.setRange(2,300)
        self.spinBox_2.setSingleStep(1)
        self.spinBox_2.setValue(100)
        self.gridLayout.addWidget(self.spinBox_2, 6, 5, 1, 1)
        self.widget_2 = QtWidgets.QWidget(self.frame)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_35 = QtWidgets.QLabel(self.widget_2)
        self.label_35.setAlignment(QtCore.Qt.AlignCenter)
        self.label_35.setObjectName("label_35")
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_35.sizePolicy().hasHeightForWidth())
        self.label_35.setSizePolicy(sizePolicy)
        sizePolicy.setHeightForWidth(self.label_35.sizePolicy().hasHeightForWidth())
        self.label_35.setSizePolicy(sizePolicy)
        self.label_35.setText("FM频率/Hz")
        self.label_35.setStyleSheet("#label_35{border-radius:5px;background-color:white;font-family:宋体;font-size:20px;}")
        self.verticalLayout_2.addWidget(self.label_35)
        self.comboBox_2 = QtWidgets.QComboBox(self.widget_2)
        self.comboBox_2.setObjectName("comboBox_2")
        self.verticalLayout_2.addWidget(self.comboBox_2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.comboBox_2.sizePolicy().hasHeightForWidth())
        self.comboBox_2.setSizePolicy(sizePolicy)
        self.comboBox_2.setStyleSheet("#comboBox_2 { \n"
"color:black;"
"border-radius:3px;"
"font-size:20px;"
"font-family:微软雅黑;"
"background-color:#F9F9F9;\n"
"}"
"#comboBox_2:hover { \n"
"border-width:2px;"
"border-color:#B797FC;"
"border-style:solid;"
"}"
"#comboBox_2::down-arrow {"
"image:url(./arrow.jpg);"
"}"
)
        def setFM():
            if self.comboBox_2.currentIndex() ==0:
                self.spinBox_2.setValue(100)
            elif self.comboBox_2.currentIndex() ==1:
                self.spinBox_2.setValue(100)
            else:
                return
        self.comboBox_2.addItem("AVR03")
        self.comboBox_2.addItem("L9916")
        self.comboBox_2.currentIndexChanged.connect(setFM)
        self.gridLayout.addWidget(self.widget_2, 6, 4, 1, 1)
        
        
        self.pushButton_5 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_5.sizePolicy().hasHeightForWidth())
        self.pushButton_5.setSizePolicy(sizePolicy)
        self.pushButton_5.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_5.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_5.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_5.setFont(font)
        self.pushButton_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_5.setStyleSheet("#pushButton_5 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_5:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_5:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_5.setFlat(True)
        self.pushButton_5.setCheckable(True)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 2, 2, 1, 1)
        self.pushButton_5.clicked.connect(self.button5State)
        self.pushButton_5.toggle()
        self.pushButton_8 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_8.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_8.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_8.setFont(font)
        self.pushButton_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_8.setStyleSheet("#pushButton_8 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_8:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_8:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_8.setFlat(True)
        self.pushButton_8.setCheckable(True)
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout.addWidget(self.pushButton_8, 4, 1, 1, 1)
        self.pushButton_8.clicked.connect(self.button8State)
        self.label = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(342, 50))
        self.label.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label.setBaseSize(QtCore.QSize(340, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setStyleSheet("#label{font-size:35px;background: qlineargradient(x1:0, y1:0, x2:0, y2:1,stop:0 #0A5EB6, stop:1 #6489B4);color:#F3F8FA;}")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 1, 1, 5)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        self.pushButton_3.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_3.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_3.setFont(font)
        self.pushButton_3.setCheckable(True)
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setStyleSheet("#pushButton_3 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_3:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_3:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_3.setFlat(True)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 1, 4, 1, 1)
        self.pushButton_3.clicked.connect(self.button3State)
        self.pushButton_15 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_15.sizePolicy().hasHeightForWidth())
        self.pushButton_15.setSizePolicy(sizePolicy)
        self.pushButton_15.setMinimumSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_15.setFont(font)
        self.pushButton_15.setStyleSheet("#pushButton_15 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_15:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_15:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_15.setFlat(True)
        self.pushButton_15.setCheckable(True)
        self.pushButton_15.setObjectName("pushButton_15")
        self.gridLayout.addWidget(self.pushButton_15, 3, 4, 1, 1)
        self.pushButton_15.clicked.connect(self.button15State)
        self.label_4 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMinimumSize(QtCore.QSize(50, 50))
        self.label_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_4.setBaseSize(QtCore.QSize(100, 50))
        self.label_4.setStyleSheet("#label_4{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #0A5EB6, stop:1 #6489B4);"
"border:0px;color:rgb(218,225,238);font-size:20px;}")
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 4, 0, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        self.pushButton_7.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_7.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_7.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_7.setFont(font)
        self.pushButton_7.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_7.setStyleSheet("#pushButton_7 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_7:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_7:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_7.setFlat(True)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.setCheckable(True)
        self.gridLayout.addWidget(self.pushButton_7, 3, 3, 1, 1)
        self.pushButton_7.clicked.connect(self.button7State)
        self.pushButton_6 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_6.sizePolicy().hasHeightForWidth())
        self.pushButton_6.setSizePolicy(sizePolicy)
        self.pushButton_6.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_6.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_6.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_6.setFont(font)
        self.pushButton_6.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_6.setStyleSheet("#pushButton_6 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_6:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_6:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_6.setFlat(True)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.setCheckable(True)
        self.gridLayout.addWidget(self.pushButton_6, 3, 2, 1, 1)
        self.pushButton_6.clicked.connect(self.button6State)
        self.pushButton_6.toggle()
        self.pushButton_10 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_10.sizePolicy().hasHeightForWidth())
        self.pushButton_10.setSizePolicy(sizePolicy)
        self.pushButton_10.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_10.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_10.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_10.setFont(font)
        self.pushButton_10.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_10.setStyleSheet("#pushButton_10 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_10:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_10:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_10.setFlat(True)
        self.pushButton_10.setCheckable(True)
        self.pushButton_10.setObjectName("pushButton_10")
        self.gridLayout.addWidget(self.pushButton_10, 4, 3, 1, 1)
        self.pushButton_10.clicked.connect(self.button10State)
        self.pushButton = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("#pushButton {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton.setFlat(True)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 4, 4, 1, 1)
        self.pushButton.setCheckable(True)
        self.pushButton.clicked.connect(self.buttonState)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        self.pushButton_4.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_4.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_4.setFont(font)
        self.pushButton_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_4.setStyleSheet("#pushButton_4 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_4:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_4:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_4.setDefault(False)
        self.pushButton_4.setFlat(True)
        self.pushButton_4.setCheckable(True)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 2, 3, 1, 1)
        self.pushButton_4.toggle()
        self.pushButton_4.clicked.connect(self.button4State)
        self.pushButton_30 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_30.sizePolicy().hasHeightForWidth())
        self.pushButton_30.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(11)
        self.pushButton_30.setFont(font)
        self.pushButton_30.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_30.setStyleSheet("#pushButton_30{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #56D473,stop:1 #5DCA79);"
"border-radius:20px;border:0px;color:rgb(218,225,238);font-size:25px;}"
"#pushButton_30:hover{background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #FAFAFA,stop:0.5 #56D473,stop:1 #5DCA79);"
"border-radius:20px;border:0px;color:rgb(218,225,238);font-size:25px;}")
        self.pushButton_30.setObjectName("pushButton_30")
        self.gridLayout.addWidget(self.pushButton_30, 7, 5, 1, 1)
        self.pushButton_30.clicked.connect(self.button30State)
        
        self.pushButton_14 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_14.sizePolicy().hasHeightForWidth())
        self.pushButton_14.setSizePolicy(sizePolicy)
        self.pushButton_14.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_14.setStyleSheet("#pushButton_14{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #0A5EB6, stop:1 #6489B4);\n"
"border:0px;color:rgb(218,225,238);font-size:20px;}")
        self.pushButton_14.setFlat(True)
        self.pushButton_14.setObjectName("pushButton_14")
        self.gridLayout.addWidget(self.pushButton_14, 7, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(50, 50))
        self.label_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_3.setBaseSize(QtCore.QSize(50, 50))
        self.label_3.setStyleSheet("#label_3{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #0A5EB6, stop:1 #6489B4);\n"
"border:0px;color:rgb(218,225,238);font-size:20px;}")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 3, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_2.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_2.setFont(font)
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.pushButton_2.setStyleSheet("#pushButton_2 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_2:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_2:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_2.setFlat(True)
        self.pushButton_2.setCheckable(True)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.button17State)
        self.pushButton_2.toggle()
        self.gridLayout.addWidget(self.pushButton_2, 1, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setMinimumSize(QtCore.QSize(50, 50))
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_2.setBaseSize(QtCore.QSize(50, 50))
        self.label_2.setStyleSheet("#label_2{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #0A5EB6, stop:1 #6489B4);"
"border:0px;color:rgb(218,225,238);font-size:20px;}")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 2, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setMinimumSize(QtCore.QSize(50, 50))
        self.label_6.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_6.setBaseSize(QtCore.QSize(60, 50))
        self.label_6.setStyleSheet("#label_6{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #0A5EB6, stop:1 #6489B4);\n"
"border:0px;color:rgb(218,225,238);font-size:20px;}")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 5, 0, 1, 1)
        self.label_1 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_1.sizePolicy().hasHeightForWidth())
        self.label_1.setSizePolicy(sizePolicy)
        self.label_1.setMinimumSize(QtCore.QSize(50, 50))
        self.label_1.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_1.setBaseSize(QtCore.QSize(50, 50))
        self.label_1.setStyleSheet("#label_1{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #0A5EB6, stop:1 #6489B4);\n"
"border:0px;color:rgb(218,225,238);font-size:20px;}")
        self.label_1.setAlignment(QtCore.Qt.AlignCenter)
        self.label_1.setObjectName("label_1")
        self.gridLayout.addWidget(self.label_1, 1, 0, 1, 1)
        self.pushButton_13 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_13.sizePolicy().hasHeightForWidth())
        self.pushButton_13.setSizePolicy(sizePolicy)
        self.pushButton_13.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_13.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_13.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_13.setFont(font)
        self.pushButton_13.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_13.setStyleSheet("#pushButton_13 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_13:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_13:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_13.setFlat(True)
        self.pushButton_13.setCheckable(True)
        self.pushButton_13.setObjectName("pushButton_13")
        self.gridLayout.addWidget(self.pushButton_13, 5, 3, 1, 1)
        self.pushButton_13.clicked.connect(self.button13State)
        self.pushButton_11 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_11.sizePolicy().hasHeightForWidth())
        self.pushButton_11.setSizePolicy(sizePolicy)
        self.pushButton_11.setMinimumSize(QtCore.QSize(50, 50))
        self.pushButton_11.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_11.setBaseSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_11.setFont(font)
        self.pushButton_11.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_11.setStyleSheet("#pushButton_11 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_11:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_11:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_11.setFlat(True)
        self.pushButton_11.setCheckable(True)
        self.pushButton_11.setObjectName("pushButton_11")
        self.gridLayout.addWidget(self.pushButton_11, 4, 5, 1, 1)
        self.pushButton_11.clicked.connect(self.button11State)
        self.pushButton_16 = QtWidgets.QPushButton(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_16.sizePolicy().hasHeightForWidth())
        self.pushButton_16.setSizePolicy(sizePolicy)
        self.pushButton_16.setMinimumSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        self.pushButton_16.setFont(font)
        self.pushButton_16.setStyleSheet("#pushButton_16 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_16:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_16:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        self.pushButton_16.setFlat(True)
        self.pushButton_16.setCheckable(True)
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_16.clicked.connect(self.button16State)
        self.gridLayout.addWidget(self.pushButton_16, 5, 4, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setMinimumSize(QtCore.QSize(50, 50))
        self.label_7.setStyleSheet("#label_7{background: qlineargradient(x1:0, y1:0, x2:1, y2:0,stop:0 #0A5EB6, stop:1 #6489B4);;border:0px;\n"
"color:rgb(218,225,238);font-size:20px;}")
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 6, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("华文行楷")
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        font.setWeight(50)
        font.setStrikeOut(False)
        font.setKerning(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        #self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("#label_5 {color:black;border-image: url(./haike_1.jpg);}")
        #pixmap = QPixmap('./haike1.jpg')
        #self.label_5.setPixmap(pixmap)
        #self.label_5.setScaledContents(True)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 0, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setStyleSheet("#label_9 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 1, 1, 1, 1)
        
        #self.label_18 = QtWidgets.QLabel(self.frame)
        #self.label_18.setStyleSheet("#label_18 {border:0px;background-color:rgba(246,246,246,100);color:black;"
#"font-family:'微软雅黑';padding-right:15px;}")
        #self.label_18.setText("EXC频率/Hz")
        #self.label_18.setObjectName("label_18")
        #self.label_18.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
        #self.gridLayout.addWidget(self.label_18, 6, 1, 1, 1)


        #self.label_18 = QtWidgets.QLabel(self.frame)
        #self.label_18.setStyleSheet("#label_18 {border:0px;background-color:rgba(246,246,246,100);color:black;"
#"font-family:'微软雅黑';padding-right:15px;}")
        #self.label_18.setText("FM频率/Hz")
        #self.label_18.setObjectName("label_18")
        #self.label_18.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
        #self.gridLayout.addWidget(self.label_18, 6, 3, 1, 1)

        self.label_10 = QtWidgets.QLabel(self.frame)
        self.label_10.setStyleSheet("#label_10 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_10.setText("")
        self.label_10.setObjectName("label_10")
        self.gridLayout.addWidget(self.label_10, 2, 1, 1, 1)
        self.label_11 = QtWidgets.QLabel(self.frame)
        self.label_11.setStyleSheet("#label_11 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")
        self.gridLayout.addWidget(self.label_11, 3, 1, 1, 1)
        self.label_12 = QtWidgets.QLabel(self.frame)
        self.label_12.setStyleSheet("#label_12 {border:0px;background-color:rgba(246,246,246,0);color:black;}\n")
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.gridLayout.addWidget(self.label_12, 5, 1, 1, 1)
        self.label_13 = QtWidgets.QLabel(self.frame)
        self.label_13.setStyleSheet("#label_13 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.gridLayout.addWidget(self.label_13, 1, 5, 1, 1)
        self.label_14 = QtWidgets.QLabel(self.frame)
        self.label_14.setStyleSheet("#label_14 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_14.setText("")
        self.label_14.setObjectName("label_14")
        self.gridLayout.addWidget(self.label_14, 2, 5, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.frame)
        self.label_15.setStyleSheet("#label_15 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_15.setText("")
        self.label_15.setObjectName("label_15")
        self.gridLayout.addWidget(self.label_15, 2, 4, 1, 1)
        self.label_16 = QtWidgets.QLabel(self.frame)
        self.label_16.setStyleSheet("#label_16 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_16.setText("")
        self.label_16.setObjectName("label_16")
        self.gridLayout.addWidget(self.label_16, 3, 5, 1, 1)
        self.label_17 = QtWidgets.QLabel(self.frame)
        self.label_17.setStyleSheet("#label_17 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:20px;}\n")
        self.label_17.setText("")
        self.label_17.setObjectName("label_17")
        self.gridLayout.addWidget(self.label_17, 5, 5, 1, 1)
        self.widget_gif = QtWidgets.QWidget(self.frame)
        self.widget_gif.setObjectName("widget_gif")
        self.gridLayout.addWidget(self.widget_gif, 7, 1, 1, 2)
        self.horizontalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)


        self.button17State()
        self.button5State()
        self.button6State()
        self.button12State()
        self.buttonState()        
        if self.pushButton.isChecked:
            print('1')
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "backWindow"))
        self.pushButton_12.setText(_translate("MainWindow", "6"))
        self.pushButton_29.setText(_translate("MainWindow", "测试项选择"))
        self.pushButton.setText(_translate("MainWindow", "LIN"))
        self.pushButton_9.setText(_translate("MainWindow", "IGN"))
        self.pushButton_31.setText(_translate("MainWindow", "手动测试"))
        self.pushButton_5.setText(_translate("MainWindow", "12V"))
        self.pushButton_8.setText(_translate("MainWindow", "LAMP"))
        self.label.setText(_translate("MainWindow", "汽车发电机调节器静态测试系统"))
        self.pushButton_3.setText(_translate("MainWindow", "单功能"))
        self.pushButton_15.setText(_translate("MainWindow", "自定义"))
        self.label_4.setText(_translate("MainWindow", "端子信息"))
        self.pushButton_7.setText(_translate("MainWindow", "外搭铁"))
        self.pushButton_6.setText(_translate("MainWindow", "内搭铁"))
        self.pushButton_10.setText(_translate("MainWindow", "Fr"))
        self.pushButton_17.setText(_translate("MainWindow", "多功能"))
        self.pushButton_4.setText(_translate("MainWindow", "24V"))
        self.pushButton_30.setText(_translate("MainWindow", "自动测试"))
        self.pushButton_14.setText(_translate("MainWindow", "！"))
        self.label_3.setText(_translate("MainWindow", "搭铁型式"))
        self.pushButton_2.setText(_translate("MainWindow", "LIN"))
        self.label_2.setText(_translate("MainWindow", "电压制式"))
        self.label_6.setText(_translate("MainWindow", "极对数"))
        self.label_1.setText(_translate("MainWindow", "模式选择"))
        self.pushButton_13.setText(_translate("MainWindow", "7"))
        self.pushButton_11.setText(_translate("MainWindow", "S"))
        self.pushButton_16.setText(_translate("MainWindow", "8"))
        self.label_7.setText(_translate("MainWindow", "工作频率"))
        #self.label_5.setText(_translate("MainWindow", "海科\n"
#"Hehicle"))
#    def closeEvent(self,a0: QtGui.QCloseEvent):
        #super().closeEvent(a0)
        #print('aaa')
# }}}

# {{{ SignalSlot
#duanziLIN
    def buttonState(self):
        if self.pushButton.isChecked():
            self.pushButton.setStyleSheet("#pushButton {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            #self.pushButton.setGraphicsEffect(self.shadow)
            
            print('Linpressed')
        else:
            self.pushButton.setStyleSheet("#pushButton {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('Linnopressed')
#MultyMode
    def button2State(self):
        if self.pushButton_17.isChecked():
            self.pushButton_17.setStyleSheet("#pushButton_17 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            self.pushButton_8.setEnabled(True)
            self.pushButton_9.setEnabled(True)
            self.pushButton_10.setEnabled(True)
            self.pushButton_11.setEnabled(True)
            #之前LIN端子开着?关掉禁用
            if self.pushButton.isChecked():
                self.pushButton.toggle()
                self.pushButton.setStyleSheet("#pushButton {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton.setDisabled(True)
            print('Multypressed')
            #之前LIN模式开着?关掉
            if self.pushButton_2.isChecked():
                self.pushButton_2.toggle()
                self.pushButton_2.setStyleSheet("#pushButton_2 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_2:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_2:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            if self.pushButton_3.isChecked():
                self.pushButton_3.toggle()
                self.pushButton_3.setStyleSheet("#pushButton_3 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_3:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_3:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        else:
            self.pushButton.setEnabled(True)
            self.pushButton_17.setStyleSheet("#pushButton_17 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_17:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_17:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('Multynopressed')

    def button3State(self):
        if self.pushButton_3.isChecked():
            self.pushButton_3.setStyleSheet("#pushButton_3 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('Singlepressed')
            if self.pushButton_8.isChecked():
                self.pushButton_8.toggle()
                self.pushButton_8.setStyleSheet("#pushButton_8 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_8:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_8:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_8.setDisabled(True)
            print('disabled')
            if self.pushButton_9.isChecked():
                self.pushButton_9.toggle()
                self.pushButton_9.setStyleSheet("#pushButton_9 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_9:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_9:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_9.setDisabled(True)
            if self.pushButton_10.isChecked():
                self.pushButton_10.toggle()
                self.pushButton_10.setStyleSheet("#pushButton_10 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_10:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_10:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_10.setDisabled(True)
            if self.pushButton_11.isChecked():
                self.pushButton_11.toggle()
                self.pushButton_11.setStyleSheet("#pushButton_11 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_11:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_11:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_11.setDisabled(True)
            if self.pushButton.isChecked():
                self.pushButton.toggle()
                self.pushButton.setStyleSheet("#pushButton {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton.setDisabled(True)
            if self.pushButton_2.isChecked():
                self.pushButton_2.toggle()
                self.pushButton_2.setStyleSheet("#pushButton_2 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_2:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_2:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            if self.pushButton_17.isChecked():
                self.pushButton_17.toggle()
                self.pushButton_17.setStyleSheet("#pushButton_17 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_17:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_17:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        else:
            self.pushButton_3.setStyleSheet("#pushButton_3 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_3:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_3:pressed {font-size:20px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_8.setEnabled(True)
            self.pushButton_9.setEnabled(True)
            self.pushButton_10.setEnabled(True)
            self.pushButton_11.setEnabled(True)
            self.pushButton.setEnabled(True)
            print('Singlenopressed')
            
    def button5State(self):
        if self.pushButton_5.isChecked():
            self.pushButton_5.setStyleSheet("#pushButton_5 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('14Vpressed')
            if self.pushButton_4.isChecked():
               self.pushButton_4.toggle()
               self.button4State()
            if self.pushButton_15.isChecked():
               self.pushButton_15.toggle()
               self.button15State()
        else:
            self.pushButton_5.setStyleSheet("#pushButton_5 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_5:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_5:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('14nopressed')
    def button4State(self):
        if self.pushButton_4.isChecked():
            self.pushButton_4.setStyleSheet("#pushButton_4 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")

            print('28Vpressed')
            if self.pushButton_5.isChecked():
               self.pushButton_5.toggle()
               self.button5State()
        else:
            self.pushButton_4.setStyleSheet("#pushButton_4 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_4:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_4:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('28nopressed')

    def button6State(self):
        if self.pushButton_6.isChecked():
            self.pushButton_6.setStyleSheet("#pushButton_6 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")

            print('innerpressed')
            if self.pushButton_7.isChecked():
               self.pushButton_7.toggle()
               self.button7State()
            if self.pushButton_15.isChecked():
               self.pushButton_15.toggle()
               self.button15State()
        else:
            self.pushButton_6.setStyleSheet("#pushButton_6 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_6:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_6:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('innernopressed')

    def button7State(self):
        if self.pushButton_7.isChecked():
            self.pushButton_7.setStyleSheet("#pushButton_7 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('outpressed')
            if self.pushButton_6.isChecked():
               self.pushButton_6.toggle()
               self.button6State()
            if self.pushButton_15.isChecked():
               self.pushButton_15.toggle()
               self.button15State()
        else:
            self.pushButton_7.setStyleSheet("#pushButton_7 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_7:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_7:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('outnopressed')

    def button8State(self):
        if self.pushButton_8.isChecked():
            self.pushButton_8.setStyleSheet("#pushButton_8 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('lamppressed')
        else:
            self.pushButton_8.setStyleSheet("#pushButton_8 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_8:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_8:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('lampnopressed')


    def button9State(self):
        if self.pushButton_9.isChecked():
            self.pushButton_9.setStyleSheet("#pushButton_9 {font-size:45px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('ignpressed')
        else:
            self.pushButton_9.setStyleSheet("#pushButton_9 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_9:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_9:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
     
            print('ignnopressed')

    def button10State(self):
        if self.pushButton_10.isChecked():
            self.pushButton_10.setStyleSheet("#pushButton_10 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('frpressed')
        else:
            self.pushButton_10.setStyleSheet("#pushButton_10 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_10:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_10:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('frnopressed')

    def button11State(self):
        if self.pushButton_11.isChecked():
            self.pushButton_11.setStyleSheet("#pushButton_11 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('spressed')
        else:
            self.pushButton_11.setStyleSheet("#pushButton_11 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_11:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_11:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('snopressed')
#polepairs_7
    def button12State(self):
        if self.pushButton_12.isChecked():
            self.pushButton_12.setStyleSheet("#pushButton_12 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('6pressed')
            if self.pushButton_13.isChecked():
                self.pushButton_13.toggle()
                self.button13State()
            if self.pushButton_16.isChecked():
                self.pushButton_16.toggle()
                self.button16State()
        else:
            self.pushButton_12.setStyleSheet("#pushButton_12 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_12:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_12:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('6nopressed')
#polepairs_8
    def button13State(self):
        if self.pushButton_13.isChecked():
            self.pushButton_13.setStyleSheet("#pushButton_13 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('type2pressed')
            if self.pushButton_12.isChecked():
                self.pushButton_12.toggle()
                self.button12State()
            if self.pushButton_16.isChecked():
                self.pushButton_16.toggle()
                self.button16State()
        else:
            self.pushButton_13.setStyleSheet("#pushButton_13 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_13:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_13:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('type2nopressed')
#polepairs_8
    def button16State(self):
        if self.pushButton_16.isChecked():
            self.pushButton_16.setStyleSheet("#pushButton_16 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('8pressed')
            if self.pushButton_12.isChecked():
                self.pushButton_12.toggle()
                self.button12State()
            if self.pushButton_13.isChecked():
                self.pushButton_13.toggle()
                self.button13State()
        else:
            self.pushButton_16.setStyleSheet("#pushButton_16 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_16:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_16:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")

#LIN Mode
    def button17State(self):
        if self.pushButton_2.isChecked():
            self.pushButton_2.setStyleSheet("#pushButton_2 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            self.pushButton.setEnabled(True)
            if self.pushButton_8.isChecked():
                self.pushButton_8.toggle()
                self.pushButton_8.setStyleSheet("#pushButton_8 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_8:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_8:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            print('lampnopressed')
            self.pushButton_8.setDisabled(True)
            print('disabled')
            if self.pushButton_9.isChecked():
                self.pushButton_9.toggle()
                self.pushButton_9.setStyleSheet("#pushButton_9 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_9:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_9:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_9.setDisabled(True)
            if self.pushButton_10.isChecked():
                self.pushButton_10.toggle()
                self.pushButton_10.setStyleSheet("#pushButton_10 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_10:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_10:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_10.setDisabled(True)
            if self.pushButton_11.isChecked():
                self.pushButton_11.toggle()
                self.pushButton_11.setStyleSheet("#pushButton_11 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_11:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_11:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            self.pushButton_11.setDisabled(True)
            print('lintypepressed')
            if self.pushButton_17.isChecked():
                self.pushButton_17.toggle()
                self.pushButton_17.setStyleSheet("#pushButton_17 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_17:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_17:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
            if self.pushButton_3.isChecked():
                self.pushButton_3.toggle()
                self.pushButton_3.setStyleSheet("#pushButton_3 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_3:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_3:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")
        else:
            self.pushButton_8.setEnabled(True)
            self.pushButton_9.setEnabled(True)
            self.pushButton_10.setEnabled(True)
            self.pushButton_11.setEnabled(True)
            self.pushButton_2.setStyleSheet("#pushButton_2 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px;}\n"
"#pushButton_2:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_2:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")

    def setText(self,content):
        global Autotestlist,pid,Numrecord
        pid.clear()
        #print('选择界面传回的自动项数目:')
        Autotestlist = content
        #print('选择界面传回的字符串:'+Autotestlist)
        #print('显示项数:')
        #print(Numrecord)

        ret = re.search("调节电压",Autotestlist)
        if ret!= None:
            pid.append(8)
        ret = re.search("漏电流",Autotestlist)
        if ret!= None:
            pid.append(9)
        ret = re.search("启动转速带灯控",Autotestlist)
        if ret!= None:
            pid.append(10)
        ret = re.search("饱和压降/L是否带负载",Autotestlist)
        if ret!= None:
            pid.append(11)
        ret = re.search("LIN版本及波特率/发电机芯片ID",Autotestlist)
        if ret!= None:
            pid.append(13)
        ret = re.search("自启动转速",Autotestlist)
        if ret!= None:
            pid.append(14)
        ret = re.search("FM极性",Autotestlist)
        if ret!= None:
            pid.append(15)
        
    def choose_Wid(self):
        global singled
        #str = ''
        if self.pushButton_17.isChecked():
            singled='1'
        else:
            singled='0'
        my = Ui_ChooseDialog()
        my.setWindowModality(Qt.ApplicationModal);
        my.show()
        def cancel_SubWid(self):
            my.close()
        my.pushButton_2.clicked.connect(cancel_SubWid)
        my.TestItemSignal.connect(self.setText)
        my.exec_()
        
    def button14State(self):
        if self.pushButton_14.isChecked():
            self.pushButton_14.setStyleSheet("#pushButton_14 {font-size:12px;font-weight: bold;color:black;background-color:cyan;border-radius:15px;}")
            print('MANUALTESTpressed')
                        
        else:
            self.pushButton_14.setStyleSheet("#pushButton_14 {color:black;}"
                                          "#pushButton_14:hover {font-size:12px;color:black;border-width:3;border-color:cyan;border-style:solid;border-radius:15px;}"
                                          "#pushButton_14:pressed {font-size:10px;}")
            print('MANUALTESTnopressed')
#AutotestButton

    def inputparam(self):
        if self.pushButton_5.isChecked():
            self.setVolt=0
        elif self.pushButton_4.isChecked():
            self.setVolt=1
        #highside/lowside/Bigiexc
        if self.pushButton_15.isChecked():
            self.setSide=2
        elif self.pushButton_7.isChecked():
            self.setSide=1
        elif self.pushButton_6.isChecked():
            self.setSide=0
        #polepairs
        if self.pushButton_12.isChecked():
            self.setPp=0
        elif self.pushButton_13.isChecked():
            self.setPp=1
        elif self.pushButton_16.isChecked():
            self.setPp=2
        #type
        if self.pushButton_2.isChecked():
            self.type=0
        elif self.pushButton_17.isChecked():
            self.type=1
        elif self.pushButton_3.isChecked():
            self.type=2
        self.testNum_MainWid=Numrecord
        self.testList_MainWid=Autotestlist
        self.Pid_MainWid=pid
        self.setPWM_EXC=round(100000/self.spinBox.value())
        self.setPWM_FM=round(100000/self.spinBox_2.value())
    def button30State(self):
        global Autotestlist
        global pid
        global Totaltestnum,Numrecord
        setPWM=0
        setPWM_2=0
        #print('发给TCP线程的测试项清单'+Autotestlist)
        print('总测试项数'+str(Numrecord))
        #14/28V
#先记录总测试项数目,计算显示表格行数用到
        Totaltestnum=Numrecord
        self.inputparam()
        my1 = Ui_AutoTest(self.setVolt,self.setSide,self.setPp,self.setPWM_EXC,self.testNum_MainWid,self.testList_MainWid,self.Pid_MainWid,self.setPWM_FM)
        my1.setWindowModality(Qt.ApplicationModal);
        my1.show()
        my1.exec_()
        


#Bigiexcmode    
    def button15State(self):
        if self.pushButton_15.isChecked():
            self.pushButton_15.setStyleSheet("#pushButton_15 {font-size:40px;font-weight: bold;\n"
            "background: qlineargradient(x1:0, y1:0, x2:1, y2:1,stop:0 #2EB6B6, stop:1 #08A19F);border-width:2px;color:#F3F8FA;border-color:#A3D4F8;border-style:solid;}")
            print('type2pressed')
            if self.pushButton_6.isChecked():
                self.pushButton_6.toggle()
                self.button6State()
            if self.pushButton_7.isChecked():
                self.pushButton_7.toggle()
                self.button7State()
        else:
            self.pushButton_15.setStyleSheet("#pushButton_15 {border:0px;background-color:rgba(246,246,246,0);color:black;font-size:25px}\n"
"#pushButton_15:hover {font-size:30px;background-color:white;border-width:1px;border-color:#A3D4F8;border-style:solid;}\n"
"#pushButton_15:pressed {font-size:20px;background-color:rgba(246,246,246,0);border-width:1px;border-color:#A3D4F8;border-style:solid;}\n")

    def buttonManualState(self):
        self.inputparam()
        self.Manual_ErrorFlag = False
        #self.netThread.Autoresultsig.connect(self.Update_result)

        my2 = Ui_Manual(self.setVolt,self.setSide,self.setPp,self.setPWM_EXC,self.testNum_MainWid,self.testList_MainWid,self.Pid_MainWid,self.setPWM_FM,self.type)
        #my2.Error.connect(Error_exit)
        my2.setWindowModality(Qt.ApplicationModal);
        my2.show()
        my2.exec_()



# }}}        

            
if __name__ == '__main__':
    import sys
    import cgitb
    sys.excepthook = cgitb.Hook(1, None, 5, sys.stderr, 'text')
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
    app = QApplication(sys.argv)
    w = QMainWindow()
    main=Ui_MainWindow()
    main.setupUi(w)
    w.show()
    sys.exit(app.exec_())
